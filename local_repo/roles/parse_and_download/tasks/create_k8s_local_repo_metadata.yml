# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Fetch software package arch types
  fetch_software_arch:
    software_name: "{{ software_entry.name }}"
  register: arc_result

- name: Set fact for all arch types
  ansible.builtin.set_fact:
    sw_arch_types_list: "{{ arc_result.arch[software_entry.name] }}"

- name: Read existing metadata
  ansible.builtin.slurp:
    src: "{{ k8s_local_repo_metadata_file_path }}"
  register: metadata_raw
  ignore_errors: true

- name: Load or initialize metadata
  ansible.builtin.set_fact:
    metadata: >-
      {% if metadata_raw is defined and metadata_raw.content is defined %}
        {{ metadata_raw.content | b64decode | from_yaml | default({})}}
      {% else %}
        {%- set base = {} -%}
        {%- for arch in sw_arch_types_list -%}
          {%- set _ = base.update({
              (prefix ~ '_local_repo_versions_' ~ arch): [],
              ('last_' ~ prefix ~ '_local_repo_version_' ~ arch): ""
          }) -%}
        {%- endfor -%}
        {{ base }}
      {% endif %}
  vars:
    prefix: "{{ 'k8s' if software_entry.name == 'k8s' else 'service_k8s' }}"

- name: Initialize metadata if not present
  ansible.builtin.set_fact:
    metadata: "{{ metadata | default({}) | from_yaml }}"

- name: Update metadata for each architecture {{ software_entry.name }}
  ansible.builtin.set_fact:
    metadata: >-
      {{
        metadata | default({}) | combine(
          {
            (software_entry.name ~ "_local_repo_versions_" ~ item): (
              (metadata[software_entry.name ~ "_local_repo_versions_" ~ item] | default([])) + [software_entry.version]
            ) | unique | sort,
            ("last_" ~ software_entry.name ~ "_local_repo_version_" ~ item): software_entry.version
          }, recursive=True)
      }}
  loop: "{{ sw_arch_types_list }}"
  loop_control:
    loop_var: item

- name: Save updated metadata for {{ software_entry.name }}
  ansible.builtin.copy:
    content: "{{ metadata | to_nice_yaml }}"
    dest: "{{ k8s_local_repo_metadata_file_path }}"
    mode: "{{ file_mode }}"
