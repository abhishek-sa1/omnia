# Copyright 2025 Intel Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check gaudi-network.sh exists or not
  ansible.builtin.stat:
    path: "{{ intel_scale_up_ports_script_path }}"
  register: check_scale_up_script

- name: Init gaudi_ver variable
  ansible.builtin.set_fact:
    gaudi_ver: "gaudi2"

- name: Check node has Gaudi3 or not
  ansible.builtin.shell: |
    set -o pipefail
    lspci -n -d {{ gaudi3_pci_vendor_device_class }}
  register: lspci_output
  changed_when: false
  failed_when: false
  args:
    executable: /bin/bash

- name: Set gaudi_ver variable
  ansible.builtin.set_fact:
    gaudi_ver: "gaudi3"
  when: lspci_output.stdout | length > 0

- name: Create gaudi-network.sh
  when: not check_scale_up_script.stat.exists
  ansible.builtin.blockinfile:
    path: "{{ intel_scale_up_ports_script_path }}"
    create: true
    mode: "{{ file_permissions }}"
    block: |
      #!/bin/bash
      EXT_PORTS="24"
      RETRIES=10
      SLEEP_INTERVAL=30

      /opt/habanalabs/qual/{{ gaudi_ver }}/bin/manage_network_ifs.sh --up
      RET_CODE=$?
      if [ "${RET_CODE}" -eq "1" ]; then
        echo "One or more Gaudi ports are down." >> /dev/stderr
        return 1
      fi

      cmd_check_if="ip -br link | grep 68:93 | awk '{print \$2}' | grep UP | wc -l"
      counter=0
      while [[ $counter -lt $RETRIES ]]; do
        res=$(eval $cmd_check_if)
        if [[ "$res" == "$EXT_PORTS" ]]; then
          echo "Gaudi external ports are up"
          break
        else
          ((counter++))
          sleep $SLEEP_INTERVAL
        fi
      done

      cmd_pfc=$(/opt/habanalabs/qual/{{ gaudi_ver }}/bin/manage_network_ifs.sh --set-pfc)
      cmd_check_pfc="/opt/habanalabs/qual/{{ gaudi_ver }}/bin/manage_network_ifs.sh --check-pfc | grep enabled=15 | wc -l"
      counter=0
      while [[ $counter -lt $RETRIES ]]; do
        res=$(eval $cmd_check_pfc)
        if [[ "$res" == "$EXT_PORTS" ]]; then
          echo "Gaudi external ports PFC set"
          break
        else
          ((counter++))
          sleep $SLEEP_INTERVAL
        fi
      done

      cmd_jumbo_mtu=$(ip -br link | grep 68:93 | awk '{print $1}' | xargs -t -I {} ip link set dev {} mtu 8000)
      cmd_check_jumbo_mtu="ip addr show | grep '68:93' -B 1 | grep 'mtu 8000' | wc -l"
      counter=0
      while [[ $counter -lt $RETRIES ]]; do
        res=$(eval $cmd_check_jumbo_mtu)
        if [[ "$res" == "$EXT_PORTS" ]]; then
          echo "Gaudi external ports MTU jumbo frames set"
          break
        else
          ((counter++))
          sleep $SLEEP_INTERVAL
        fi
      done

- name: Change permission on gaudi-network.sh file
  ansible.builtin.file:
    path: "{{ intel_scale_up_ports_script_path }}"
    state: file
    owner: root
    group: root
    mode: "{{ file_permissions }}"

- name: Check if the service is installed
  ansible.builtin.systemd:
    name: "{{ intel_scale_up_ports_service_name }}"
    state: started
  register: service_status
  failed_when: false

- name: Ensure the service directory exists
  when: service_status.status is not defined
  ansible.builtin.file:
    path: "{{ intel_scale_up_ports_service_dir }}"
    state: directory
    mode: "{{ file_permissions }}"

- name: Create the systemd service unit file
  when: service_status.status is not defined
  ansible.builtin.copy:
    dest: "{{ intel_scale_up_ports_service_dir }}/{{ intel_scale_up_ports_service_name }}"
    content: |
      [Unit]
      Description=Gaudi accelerator network
      Requires=lldpad.service
      After=lldpad.service
      Before=containerd.service

      [Service]
      Type=simple
      RemainAfterExit=True
      ExecStart={{ intel_scale_up_ports_script_path }}
      ExecStop=/bin/kill -s -TERM $MAINPID

      [Install]
      WantedBy=multi-user.target
    mode: "{{ svc_file_permissions }}"

- name: Reload systemd to pick up new service
  when: service_status.status is not defined
  ansible.builtin.systemd:
    daemon_reload: true


- name: Enable and start the service
  ansible.builtin.systemd:
    name: "{{ intel_scale_up_ports_service_name }}"
    enabled: true
    state: started
