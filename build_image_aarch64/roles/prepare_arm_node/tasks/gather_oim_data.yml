# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Inventory Validation
- name: Fail if no inventory provided
  ansible.builtin.fail:
    msg: "{{ no_inventory_error_msg }}"
  when: groups['all'] | length == 0

- name: Fail if inventory group 'admin_aarch64' is empty
  ansible.builtin.fail:
    msg: "{{ admin_aarch64_empty_error_msg }}"
  when: groups['admin_aarch64'] is not defined or groups['admin_aarch64'] | length == 0

- name: Fail if inventory group 'admin_aarch64' has more than one host
  ansible.builtin.fail:
    msg: "{{ admin_aarch64_count_error_msg }}"
  when: groups['admin_aarch64'] | length != 1

# Validate share option
- name: Set share option fact
  ansible.builtin.set_fact:
    omnia_share_option: "{{ hostvars['localhost']['omnia_share_option'] }}"

- name: Fail if share option is not NFS
  ansible.builtin.fail:
    msg: "{{ nfs_not_configured_msg }}"
  when: omnia_share_option != "NFS"

# Load network specification
- name: Load network spec file
  ansible.builtin.include_vars:
    file: "{{ network_spec }}"
  register: include_network_spec
  no_log: true

- name: Fail if network spec cannot be loaded
  ansible.builtin.fail:
    msg: "{{ network_spec_syntax_fail_msg }} Error: {{ include_network_spec.message }}"
  when: include_network_spec is failed

# Parse network spec data
- name: Parse network spec
  ansible.builtin.set_fact:
    network_data: "{{ network_data | default({}) | combine({item.key: item.value}) }}"
  with_dict: "{{ Networks }}"

# Set PXE IP fact
- name: Set PXE IP fact
  ansible.builtin.set_fact:
    oim_pxe_ip: "{{ network_data.admin_network.primary_oim_admin_ip }}"
    cacheable: true

- name: Create aarch64 directory if not exists
  ansible.builtin.file:
    path: "{{ ochami_aarch_64_dir }}"
    state: directory
    mode: "{{ hostvars['localhost']['dir_permissions_755'] }}"

# Validate pulp.repo existence
- name: Check if pulp.repo exists
  ansible.builtin.stat:
    path: "{{ pulp_repo_file_path }}"
  register: pulp_repo_stat

# Handle missing pulp.repo
- name: Notify if pulp.repo is missing
  ansible.builtin.fail:
    msg: "{{ pulp_repo_missing_error_msg }}"
  when: not pulp_repo_stat.stat.exists

# Read pulp.repo file
- name: Read pulp.repo content
  ansible.builtin.slurp:
    path: "{{ pulp_repo_file_path }}"
  register: pulp_repo_content
  when: pulp_repo_stat.stat.exists

- name: Extract aarch64_baseos repo section
  ansible.builtin.set_fact:
    aarch64_baseos_repo: >-
      {{
        (pulp_repo_content.content | b64decode)
        | regex_search(
            '''(?s)\[aarch64_baseos\].*?(?=\n\[|\Z)'''
          )
      }}
  when: pulp_repo_stat.stat.exists

# Fail if aarch64_appstream repo is not found
- name: Fail if aarch64_baseos repo section is missing
  ansible.builtin.fail:
    msg: "{{ repo_not_found_error_msg }}"
  when: aarch64_baseos_repo is not defined or aarch64_baseos_repo | length == 0

# Write only aarch64_appstream repo into new pulp.repo
- name: Write aarch64_appstream repo into pulp repo path
  ansible.builtin.copy:
    content: "{{ aarch64_baseos_repo }}"
    dest: "{{ pulp_repo_store_path }}"
    mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
  when: aarch64_baseos_repo is defined
