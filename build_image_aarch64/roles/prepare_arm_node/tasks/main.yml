# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Add target host to known_hosts
  ansible.builtin.known_hosts:
    name: "{{ inventory_hostname }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -H ' + inventory_hostname) }}"
  delegate_to: localhost

# Check if passwordless SSH is enabled from omnia_core to arm node
- name: Check if passwordless SSH is enabled
  ansible.builtin.command:
    cmd: ssh -o BatchMode=yes -o ConnectTimeout=5 root@{{ inventory_hostname }} 'echo OK'
  register: ssh_check
  ignore_errors: true
  changed_when: false
  delegate_to: localhost

# Set up passwordless SSH from localhost if not already enabled
- name: Setup passwordless SSH from localhost
  ansible.builtin.expect:
    command: "ssh-copy-id -i /root/.ssh/id_rsa.pub root@{{ inventory_hostname }}"
    responses:
      "password:": "{{ hostvars['localhost']['provision_password'] }}"
  when: ssh_check.failed
  delegate_to: localhost
  no_log: true

- name: Verify passwordless SSH
  ansible.builtin.command:
    cmd: ssh -o BatchMode=yes root@{{ inventory_hostname }} 'echo OK'
  register: ssh_verify
  failed_when: ssh_verify.stdout != "OK"
  changed_when: false
  delegate_to: localhost

# Check the machine architecture of the target host
- name: Check machine architecture
  ansible.builtin.command: uname -m
  register: arch_result
  changed_when: false

# Fail the play if the target machine is not aarch64
- name: Fail if machine is not aarch64
  ansible.builtin.fail:
    msg: "{{ not_aarch64_error_msg }}"
  when: arch_result.stdout != "aarch64"

# Remove any existing entries for OIM hostname in /etc/hosts
- name: Remove any existing entries for OIM hostname in /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '.*\s+{{ hostvars["localhost"]["oim_hostname"] }}$'
    state: absent
  changed_when: true

- name: Add correct OIM PXE IP and hostname to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ hostvars['localhost']['oim_pxe_ip'] }} {{ hostvars['localhost']['oim_hostname'] }}"
    state: present
    mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
    create: true

# Verify the entry exists in /etc/hosts
- name: Verify OIM PXE IP and hostname in /etc/hosts
  ansible.builtin.command:
    cmd: "grep {{ hostvars['localhost']['oim_pxe_ip'] }} /etc/hosts"
  register: etc_hosts_check
  changed_when: false
  failed_when: etc_hosts_check.stdout == ""

# Show verification result
- name: Display verification result
  ansible.builtin.debug:
    msg: "Entry in /etc/hosts: {{ etc_hosts_check.stdout }}"

# Ping the OIM hostname from arm node to verify connectivity
- name: Ping OIM hostname from target host
  ansible.builtin.raw: "ping -c 2 {{ hostvars['localhost']['oim_hostname'] }}"
  register: ping_result
  changed_when: false
  failed_when: ping_result.rc != 0

- name: Show ping result
  ansible.builtin.debug:
    msg: "{{ ping_result.stdout }}"

# Register NFS details
- name: Set NFS info fact
  ansible.builtin.set_fact:
    nfs_info:
      server_ip: "{{ hostvars['localhost']['nfs_server_ip'] }}"
      server_share_path: "{{ hostvars['localhost']['nfs_server_share_path'] }}"
      shared_path: "{{ hostvars['localhost']['oim_shared_path'] }}"

# Ensure mount point exists
- name: Ensure NFS mount point directory exists
  ansible.builtin.file:
    path: "{{ nfs_info.shared_path }}"
    state: directory
    mode: "{{ hostvars['localhost']['dir_permissions_755'] }}"
  become: true

- name: Copy pulp.repo from omnia_core to target host
  ansible.builtin.copy:
    src: "{{ pulp_repo_store_path }}/pulp.repo"
    dest: /etc/yum.repos.d/pulp.repo
    mode: "{{ hostvars['localhost']['file_permissions_644'] }}"

# Copy pulp_webserver.crt to target host
- name: Copy pulp webserver certificate to target host
  ansible.builtin.copy:
    src: "{{ pulp_webserver_cert_path }}"
    dest: "{{ anchors_path }}"
    mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
  become: true

- name: Update CA trust on target host
  ansible.builtin.command: update-ca-trust
  register: update_ca
  changed_when: false

- name: Check if NFS is mounted
  ansible.builtin.command:
    cmd: "mountpoint -q {{ nfs_info.shared_path }}"
  register: nfs_mounted
  ignore_errors: true
  changed_when: false

# Install NFS client package
- name: Install NFS client package
  ansible.builtin.dnf:
    name: nfs-utils
    state: present
  when: nfs_mounted.rc != 0
  become: true

# Mount NFS share if not mounted
- name: Mount NFS share
  ansible.builtin.mount:
    path: "{{ nfs_info.shared_path }}"
    src: "{{ nfs_info.server_ip }}:{{ nfs_info.server_share_path }}"
    fstype: nfs
    opts: defaults
    state: mounted
  when: nfs_mounted.rc != 0
  become: true

# Verify the mount
- name: Verify NFS mount
  ansible.builtin.command:
    cmd: "mountpoint -q {{ nfs_info.shared_path }}"
  register: verify_nfs
  failed_when: verify_nfs.rc != 0
  changed_when: false

- name: Display NFS mount status
  ansible.builtin.debug:
    msg: "NFS share {{ nfs_info.server_ip }}:{{ nfs_info.server_share_path }} is mounted on {{ nfs_info.shared_path }}"

# Combine NFS shared path and relative tar path
- name: Set full ochami tar path
  ansible.builtin.set_fact:
    ochami_tar_path: "{{ nfs_info.shared_path }}/{{ ochami_tar_path }}"

# Check if ochami image tar file exists
- name: Check if ochami image tar file exists
  ansible.builtin.stat:
    path: "{{ ochami_tar_path }}"
  register: ochami_tar_stat
  changed_when: false

# Fail if tar file not found
- name: Fail when ochami image tar file does not exist
  ansible.builtin.fail:
    msg: "{{ ochami_tar_fail_msg }}"
  when: not ochami_tar_stat.stat.exists

# Load ochami image using Podman
- name: Load ochami image using Podman
  ansible.builtin.command:
    cmd: "podman load -i {{ ochami_tar_path }}"
  register: podman_load_result
  failed_when: podman_load_result.rc != 0
  changed_when: true

# Extract image name from podman load output
- name: Extract image name from podman load output
  ansible.builtin.set_fact:
    loaded_image_name: "{{ (podman_load_result.stdout | regex_findall('Loaded image: (.+)'))[0] | trim }}"

# Debug the extracted image name
- name: Debug loaded image name
  ansible.builtin.debug:
    msg: "Extracted image name: {{ loaded_image_name }}"

# Validate image presence in Podman
- name: Validate image presence in Podman
  ansible.builtin.command:
    cmd: "podman images --format '{{ '{{.Repository}}:{{.Tag}}' }}'"
  register: podman_images
  changed_when: false

- name: Set full regctl tar path
  ansible.builtin.set_fact:
    regctl_tar_path: "{{ nfs_info.shared_path }}/{{ regctl_tar_path }}"

- name: Check if regctl tar file exists
  ansible.builtin.stat:
    path: "{{ regctl_tar_path }}"
  register: regctl_tar_stat
  changed_when: false

- name: Fail when regctl tar file does not exist
  ansible.builtin.fail:
    msg: "regctl tar file not found at {{ regctl_tar_path }}"
  when: not regctl_tar_stat.stat.exists

- name: Ensure temporary extraction directory exists
  ansible.builtin.file:
    path: /tmp/regctl_extract
    state: directory
    mode: "{{ hostvars['localhost']['dir_permissions_755'] }}"
  become: true

- name: Extract regctl binary from tar to temporary folder
  ansible.builtin.unarchive:
    src: "{{ regctl_tar_path }}"
    dest: "/tmp/regctl_extract"
    remote_src: yes
    extra_opts: [--strip-components=0]
  become: true

- name: Copy and rename regctl binary to /usr/local/bin/regctl
  ansible.builtin.copy:
    src: "/tmp/regctl_extract/regctl-linux-arm64"
    dest: "{{ regctl_bin_path }}"
    remote_src: yes
    mode: "0755"
  become: true

- name: Set registry TLS option using regctl
  ansible.builtin.command: "{{ regctl_bin_path }} registry set --tls disabled {{ hostvars['localhost']['oim_hostname'] }}:5000"
  register: regctl_result
  changed_when: regctl_result.rc == 0
