- name: Create compute image logs
  ansible.builtin.file:
    path: "{{ openchami_log_dir }}/{{ item.key }}_compute_image.log"
    state: touch
    mode: "{{ dir_permissions_644 }}"
  loop: "{{ compute_images_dict | dict2items }}"
  loop_control:
    loop_var: item

- name: Render compute images templates
  template:
    src: "{{ openchami_compute_image_vars_template }}"
    dest: "{{ openchami_dir }}/{{ item.key }}_compute_images.yaml"
    mode: "{{ dir_permissions_644 }}"
  vars:
    functional_group: "{{ item.value.functional_group }}"
    packages: "{{ item.value.packages }}"
    rhel_base_compute_image_name: "{{ item.key }}"
  loop: "{{ compute_images_dict | dict2items }}"
  loop_control:
    loop_var: item

- name: Start OpenCHAMI playbooks asynchronously for compute image_build
  ansible.builtin.shell: |
    set -o pipefail
    ansible-playbook {{ openchami_clone_path }}/deployment-recipes/dell/podman-quadlets/image.yaml \
      -i {{ openchami_clone_path }}/deployment-recipes/dell/podman-quadlets/inventory/01-ochami -v \
      --extra-vars "@{{ openchami_dir }}/{{ item.key }}_compute_images.yaml" \
      -e "minio_s3_username={{ minio_s3_username }}" \
      -e "minio_s3_password={{ minio_s3_password }}" \
      --tags compute_image -v | \
      /usr/bin/tee "{{ openchami_log_dir }}/{{ item.key }}_compute_image.log"
  async: 3600  # Set async timeout (e.g., 1 hour)
  poll: 0  # Non-blocking (continue the playbook without waiting for completion)
  loop: "{{ compute_images_dict | dict2items }}"
  loop_control:
    loop_var: item
  register: compute_image_build_job

- name: Wait for all OpenCHAMI jobs to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: "{{ job_retry }}"
  delay: "{{ job_delay }}"
  loop: "{{ compute_image_build_job.results }}"
  loop_control:
    label: "{{ item.item.key }}"
