# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Check if k8s is running
  block:
    - name: Check if Kubernetes is running
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: node_info
      failed_when: node_info.resources is not defined or node_info.resources | length == 0
  rescue:
    - name: Kubernetes is not running
      ansible.builtin.fail:
        msg: "{{ k8s_not_deployed }}"

# Check if powerscale is already deployed
- name: Verify powerscale is deployed on cluster
  ansible.builtin.shell: >
    set -o pipefail && \
    kubectl get pod -n {{ powerscale_ns }} --no-headers | grep {{ powerscale_pod_indcator }}
  register: powerscale_precheck
  changed_when: false
  failed_when: false

- name: Set flag if powerscale is already deployed
  ansible.builtin.set_fact:
    powerscale_already_deployed: "{{ powerscale_precheck.rc == 0 }}"

- name: Pause to notify powerscale already deployed
  ansible.builtin.pause:
    seconds: "{{ warning_wait_time }}"
    prompt: "{{ warning_msg_already_deployed }}"
  when: powerscale_already_deployed

- name: Proceed prereq if powerscale not already deployed
  when: not powerscale_already_deployed
  block:
    # Check helm is deployed on cluster
    - name: Verify helm is deployed on cluster
      ansible.builtin.command: helm
      register: helm_return_code
      changed_when: false
      failed_when: false

    - name: Fail if helm is not deployed
      ansible.builtin.assert:
        that:
          - helm_return_code.rc == 0
        fail_msg: "{{ helm_not_deployed }}"

    - name: Remove /opt/omnia/csi-driver-powerscale directory if already present
      ansible.builtin.file:
        path: "{{ csi_powerscale_path }}"
        state: absent

    - name: Create csi-driver-powerscale directory under /opt/omnia
      ansible.builtin.file:
        path: "{{ csi_powerscale_path }}"
        mode: "{{ permission_644 }}"
        state: directory
        owner: "{{ owner_value }}"
        group: "{{ group_value }}"

    - name: Check if secret file is encrypted
      ansible.builtin.command: cat "{{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}"
      changed_when: false
      register: config_content
      connection: local
      delegate_to: localhost

    - name: Decrpyt secret file
      ansible.builtin.command: >-
        ansible-vault decrypt {{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}
        --vault-password-file {{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      changed_when: true
      connection: local
      delegate_to: localhost

    # Copy secret file to /opt/omnia
    - name: Copy secret file
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}"
        dest: "{{ csi_powerscale_secret_path }}"
        owner: "{{ owner_value }}"
        group: "{{ group_value }}"
        mode: "{{ permission_644 }}"

    # check if powerscale is pininging by reading endpoint value from secrets.yaml file
    - name: Load values.yaml file
      ansible.builtin.include_vars:
        file: "{{ hostvars['localhost']['csi_powerscale_driver_values_file_path'] }}"
        name: csi_powerscale_values_file

    - name: Load secret file for input validation
      ansible.builtin.include_vars:
        file: "{{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}"
        name: clusters
      no_log: true

    - name: Extract PowerScale endpoint IP or Host from loaded secret data
      ansible.builtin.set_fact:
        powerscale_host: "{{ clusters.isilonClusters[0].endpoint | regex_replace('https?://', '') | regex_replace('/.*', '') }}"

    - name: Check if the extracted PowerScale IP or Host is reachable
      ansible.builtin.command:
        cmd: "ping -c 1 {{ powerscale_host }}"  # Replace {{ power_scale_host }} with your actual host variable
      register: ping_result
      ignore_errors: true  # Continue even if the ping fail
      changed_when: false

    - name: Print ping result or error if ping fails
      ansible.builtin.debug:
        msg: >
          {% if ping_result.rc == 0 %}
            Powerscale Host reachable! Output: {{ ping_result.stdout }}
          {% else %}
            Powerscale Host not reachable. Error: {{ ping_result.stderr }}
          {% endif %}

    - name: Encrypt secret file
      ansible.builtin.command: >-
        ansible-vault encrypt {{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}
        --vault-password-file {{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}
      changed_when: false
      connection: local
      delegate_to: localhost

    # Copy values file to /opt/omnia
    - name: Copy values file
      ansible.builtin.copy:
        src: "{{ hostvars['localhost']['csi_powerscale_driver_values_file_path'] }}"
        dest: "{{ csi_powerscale_values_path }}"
        owner: "{{ owner_value }}"
        group: "{{ group_value }}"
        mode: "{{ permission_644 }}"

    - name: Get dependencies from local repo
      block:
        - name: Get csi-powerscale git tar
          ansible.builtin.get_url:
            url: "{{ hostvars['localhost']['offline_git_path'] }}/csi-powerscale/{{ csi_powerscale_git }}"
            dest: "{{ csi_powerscale_path }}/{{ csi_powerscale_git }}"
            mode: "{{ permission_644 }}"

        - name: Extract csi-powerscale tar file
          ansible.builtin.unarchive:
            src: "{{ csi_powerscale_path }}/{{ csi_powerscale_git }}"
            dest: "{{ csi_powerscale_path }}"
            remote_src: true

        - name: Get dell/helm-charts git tar
          ansible.builtin.get_url:
            url: "{{ hostvars['localhost']['offline_git_path'] }}/helm-charts/{{ helm_charts_git }}"
            dest: "{{ csi_powerscale_path }}/csi-powerscale/{{ helm_charts_git }}"
            mode: "{{ permission_644 }}"

        - name: Get external-snapshotter git tar
          ansible.builtin.get_url:
            url: "{{ hostvars['localhost']['offline_git_path'] }}/external-snapshotter/{{ external_snapshotter_git }}"
            dest: "{{ csi_powerscale_path }}/csi-powerscale/{{ external_snapshotter_git }}"
            mode: "{{ permission_644 }}"
      rescue:
        - name: Handle dependency failure
          ansible.builtin.fail:
            msg: "{{ fail_msg_download }}"

    - name: Extract dell/helm-charts tar file under csi-powerscale directory
      ansible.builtin.unarchive:
        src: "{{ csi_powerscale_path }}/csi-powerscale/{{ helm_charts_git }}"
        dest: "{{ csi_powerscale_path }}/csi-powerscale"
        remote_src: true

    - name: Extract external snapshotter tar file under csi-powerscale directory
      ansible.builtin.unarchive:
        src: "{{ csi_powerscale_path }}/csi-powerscale/{{ external_snapshotter_git }}"
        dest: "{{ csi_powerscale_path }}/csi-powerscale"
        remote_src: true

    - name: Transfer storage class template to kube_control_plane
      ansible.builtin.template:
        src: ps_storage_class.j2
        dest: "{{ csi_powerscale_path }}/ps_storage_class.yml"
        owner: "{{ owner_value }}"
        group: "{{ group_value }}"
        mode: "{{ permission_644 }}"

    - name: Create isilon namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: isilon
        state: present
      register: command_result
      changed_when: command_result.changed
      failed_when: false
