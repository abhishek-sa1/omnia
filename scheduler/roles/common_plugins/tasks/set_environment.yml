#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set environment
  ansible.builtin.set_fact:
    compute_env: "{{ {} if hostvars['localhost']['k8s_offline_install'] else (_routed_env if hostvars['localhost']['enable_routed_internet'] else _direct_env) }}" # noqa: yaml[line-length]

- name: Debug environment
  ansible.builtin.debug:
    var: compute_env

- name: Set fact for k8s packages json
  ansible.builtin.set_fact:
    k8s_packages_json: "{{ hostvars['localhost']['k8s_packages_json'] }}"

- name: Set plugin URLs (offline mode)
  ansible.builtin.set_fact:
    # mpi_operator_yaml_url: "{{ hostvars['localhost']['offline_manifest_path'] }}/
    # {{ hostvars['localhost']['mpi_operator'] }}/{{ hostvars['localhost']['mpi_operator'] }}.yml" # noqa: yaml[line-length]
    # xilinx_device_plugin_yaml_url: "{{ hostvars['localhost']['offline_manifest_path'] }}
    # /{{ hostvars['localhost']['xilinx_device_plugin_pkg'] }}/{{ hostvars['localhost']['xilinx_device_plugin_pkg'] }}.yml" # noqa: yaml[line-length]
    # habana_device_plugin_yaml_url: "{{ hostvars['localhost']['offline_manifest_path'] }}/habana-device-plugin.yaml"
    nfs_subdir_external_provisioner_repo: "{{ hostvars['localhost']['offline_tarball_path'] }}/{{ hostvars['localhost']['nfs_subdir_external_provisioner_pkg'] }}/{{ hostvars['localhost']['nfs_subdir_external_provisioner_pkg'] }}.tar.gz" # noqa: yaml[line-length]
    # multus_deployment_manifest_path: "{{ hostvars['localhost']['offline_manifest_path'] }}/
    # {{ hostvars['localhost']['multus_daemonset_pkg'] }}/{{ hostvars['localhost']['multus_daemonset_pkg'] }}.yml" # noqa: yaml[line-length]
    # rocm_device_plugin_yaml_url: "{{ hostvars['localhost']['offline_manifest_path'] }}/rocm-device-plugin/rocm-device-plugin.yml"
    # nvidia_device_plugin_repo: "{{ hostvars['localhost']['offline_tarball_path'] }}/nvidia-device-plugin/nvidia-device-plugin.tar.gz"
    # whereabouts_git_url: "{{ hostvars['localhost']['offline_git_path'] }}/
    # {{ hostvars['localhost']['whereabouts_pkg'] }}/{{ hostvars['localhost']['whereabouts_pkg'] }}.tar.gz" # noqa: yaml[line-length]
  when: hostvars['localhost']['k8s_offline_install']

- name: Extract and set online URLs from k8s_packages_json
  ansible.builtin.set_fact:
  # mpi_operator_yaml_url: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'manifest') |
  # selectattr('package', 'search', 'mpi-operator') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # xilinx_device_plugin_yaml_url: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'manifest') |
  # selectattr('package', 'search', 'xilinx-device-plugin') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # multus_daemonset_yaml_url: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'manifest') |
  # selectattr('package', 'search', 'multus-daemonset') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # whereabouts_git_url: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'git') | selectattr('package', 'search', 'whereabouts') |
  # map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # whereabouts_git_version: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'git') |
  # selectattr('package', 'search', 'whereabouts') | map(attribute='version') | list | first }}" # noqa: yaml[line-length]
    nfs_subdir_external_provisioner_repo: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'tarball') | selectattr('package', 'search', 'nfs-subdir-external-provisioner') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # rocm_device_plugin_yaml_url: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'manifest') |
  # selectattr('package', 'search', 'rocm-device-plugin') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  # nvidia_device_plugin_repo: "{{ k8s_packages_json['k8s']['cluster'] | selectattr('type', 'equalto', 'tarball') |
  # selectattr('package', 'search', 'nvidia-device-plugin') | map(attribute='url') | list | first }}" # noqa: yaml[line-length]
  when: not hostvars['localhost']['k8s_offline_install']
