# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Include variable file storage_config.yml
  block:
    - name: Include variable file storage_config.yml
      ansible.builtin.include_vars: "{{ input_project_dir }}/{{ storage_config_filename }}"
      register: include_storage_config
      no_log: true
  rescue:
    - name: Failed to include storage_config.yml
      ansible.builtin.fail:
        msg: "{{ storage_config_syntax_fail_msg }} Error: {{ include_storage_config.message }}"

- name: Validate nfs_client_params parameters are not empty
  ansible.builtin.fail:
    msg: "{{ nfs_client_params_failure_msg }}"
  when:
    - nfs_client_params | default("", true) | length < 1

# Find the matching NFS entry
- name: Find matching NFS client param
  ansible.builtin.set_fact:
    matched_nfs: "{{ (nfs_client_params | selectattr('nfs_name', 'equalto', nfs_storage_name) | list | first) | default({}) }}"
  when: nfs_client_params | length > 0

- name: Fail when no matching nfs_name found in nfs_client_params
  ansible.builtin.fail:
    msg: "No NFS entry found for nfs_storage_name={{ nfs_storage_name }} in nfs_client_params"
  when: matched_nfs | length == 0

# Get k8s nfs_server_ip and nfs_server_path
- name: Get nfs_server details when k8s_support is true
  when: k8s_support and service_k8s_playbook is defined
  block:
    - name: Set k8s_nfs_server_ip when k8s_support is true
      ansible.builtin.set_fact:
        k8s_nfs_server_ip: "{{ matched_nfs.server_ip }}"

    - name: Change k8s_nfs_server_ip to admin_nic_ip when it is "localhost"
      ansible.builtin.set_fact:
        k8s_nfs_server_ip: "{{ hostvars['localhost']['admin_nic_ip'] }}"
      when: k8s_nfs_server_ip == "localhost"

    - name: Set fact for plugins deployment to false when nfs server ip is localhost
      ansible.builtin.set_fact:
        plugins_deployment: false
      when:
        k8s_nfs_server_ip == ""

    - name: Service K8S will not be deployed
      ansible.builtin.fail:
        msg: "{{ plugins_warning_msg }}"
      when: plugins_deployment is false

    - name: Wait for 30 seconds to allow user to read warning
      ansible.builtin.pause:
        seconds: 30
      when: plugins_deployment is false

    - name: Get server_share_path when k8s_support is true
      ansible.builtin.set_fact:
        k8s_server_share_path: "{{ matched_nfs.server_share_path }}"

    - name: Fail if server_share_path is not set in storage_config.yml
      ansible.builtin.fail:
        msg: "{{ nfs_client_params_server_share_invalid_msg }}"
      when: plugins_deployment is true and (k8s_server_share_path | default('')) == ''

    - name: Get client_share_path when k8s_support is true
      ansible.builtin.set_fact:
        share_path: "{{ matched_nfs.client_share_path }}"

# Get slurm nfs_share_path
- name: Get server_share_path when Slurm/UCX/OpenMPI support is true
  ansible.builtin.set_fact:
    share_path: "{{ matched_nfs.client_share_path }}"
  when:
    - slurm_support or ucx_support or openmpi_support
    - matched_nfs | length > 0

# Check if both slurm_support and k8s_support are not defined for benchmarks
- name: Fail if both slurm_support and k8s_support are not true for benchmarks
  ansible.builtin.assert:
    that:
      - slurm_support or k8s_support
    fail_msg: "{{ nfs_client_params_benchmarks_fail_msg }}"
    success_msg: "{{ nfs_client_params_benchmarks_success_msg }}"
  when:
    - ucx_support or openmpi_support

# Set share_path according to slurm_support and k8s_support for benchmarks
- name: Set share_path from k8s_client_share_path when k8s_support is true and slurm_support is false
  ansible.builtin.set_fact:
    share_path: "{{ matched_nfs.client_share_path }}"
  when:
    - k8s_support
    - ucx_support or openmpi_support
    - not slurm_support

- name: Set share_path from slurm_client_share_path when slurm_support is true and k8s_support is false
  ansible.builtin.set_fact:
    share_path: "{{ matched_nfs.client_share_path }}"
  when:
    - slurm_support
    - ucx_support or openmpi_support
    - not k8s_support

- name: Set share_path from slurm_client_share_path when slurm_support is true and k8s_support is false
  ansible.builtin.set_fact:
    share_path: "{{ matched_nfs.client_share_path }}"
  when:
    - not slurm_support and not k8s_support
    - ucx_support or openmpi_support
