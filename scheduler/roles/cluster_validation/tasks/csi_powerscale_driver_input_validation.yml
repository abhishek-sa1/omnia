#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

# Encryption for secret file
- name: Check if csi_powerscale_secret_vault exists
  ansible.builtin.stat:
    path: "{{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}"
  register: vault_key_result

- name: Create ansible vault key if it does not exist
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: not vault_key_result.stat.exists

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_key_permission }}"
    owner: root
    create: true
  when: not vault_key_result.stat.exists

- name: Check if secret file is encrypted
  ansible.builtin.command: cat "{{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}"
  changed_when: false
  register: config_content

- name: Decrpyt secret file
  ansible.builtin.command: >-
    ansible-vault decrypt {{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}
    --vault-password-file {{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"
  changed_when: false

- name: Load secret file for input validation
  ansible.builtin.include_vars:
    file: "{{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}"
    name: clusters
  no_log: true

- name: Encrypt secret file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ hostvars['localhost']['csi_powerscale_driver_secret_file_path'] }}
    --vault-password-file {{ input_project_dir }}/{{ csi_powerscale_secret_vaultname }}
  changed_when: false

# Validate mandate user input in values file for csi driver
- name: Load values.yaml file
  ansible.builtin.include_vars:
    file: "{{ hostvars['localhost']['csi_powerscale_driver_values_file_path'] }}"
    name: csi_powerscale_values_file

- name: Validate powerscale ip and credential in secret.yaml file using API call to powerscale
  ansible.builtin.include_tasks: csi_powerscale_driver_api_validation.yml
  loop: "{{ clusters.isilonClusters }}"
