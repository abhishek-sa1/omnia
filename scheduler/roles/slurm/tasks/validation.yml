# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Check slurm support
  when: slurm_support is not defined or not slurm_support
  block:
    - name: Slurm not enabled in sofware_config.json
      ansible.builtin.debug:
        msg: "{{ slurm_support_msg }}"

    - name: Skip slurm deployment
      ansible.builtin.meta: end_play

- name: Check share support for nfs
  when: (slurm_installation_type == nfs_share_slurm) and (share_path is not defined or not share_path)
  block:
    - name: Slurm install type is NFS but share path not available
      ansible.builtin.debug:
        msg: "{{ share_unavailable_msg }}"

    - name: Skip slurm deployment
      ansible.builtin.meta: end_play

- name: Slurm control and node group to contain at least 1 node
  ansible.builtin.assert:
    that:
      - "'slurm_control_node' in groups"
      - "'slurm_node' in groups"
      - groups['slurm_control_node'] | length | int >= 1 # HA
      - groups['slurm_node'] | length | int >= 1
    fail_msg: "{{ inv_validation_fail_msg }}"

- name: Controller list
  ansible.builtin.set_fact:
    control_node_list: "{{ (control_node_list | default([])) + ([hostvars[item]['ansible_nodename'] | split('.') | first]) }}"
  loop: "{{ groups['slurm_control_node'] }}"

- name: Node list
  ansible.builtin.set_fact:
    slurm_node_list: "{{ (slurm_node_list | default([])) + ([hostvars[item]['ansible_nodename'] | split('.') | first]) }}"
  loop: "{{ groups['slurm_node'] }}"

- name: Login list
  ansible.builtin.set_fact:
    login_node_list: "{{ (login_node_list | default([])) + ([hostvars[item]['ansible_nodename'] | split('.') | first]) }}"
  loop: "{{ groups['login_node'] | default([]) }}"

- name: Control node not part of other groups
  ansible.builtin.assert:
    that:
      - control_node_list | intersect(slurm_node_list) | length | int == 0
      - control_node_list | intersect(login_node_list | default([])) | length | int == 0
    fail_msg: "{{ intersect_validation_fail_msg }}"

- name: Check unreachable
  ansible.builtin.assert:
    that:
      - groups['slurm_control_node'] | difference(ansible_play_hosts) | length | int == 0 # nodename
    fail_msg: "All control nodes are not reachable."

# TODO: Add validation for slurmdbd inputs

# TODO: Add validation for db inputs
- name: Check password
  ansible.builtin.assert:
    that:
      - slurm_db_password | length > 1

- name: Refresh mounts
  ansible.builtin.shell: |
    umount {{ share_path }}
    mount -a
  register: refresh_mounts
  ignore_errors: true
  changed_when: refresh_mounts.rc == 0
  when: slurm_installation_type == nfs_share_slurm
