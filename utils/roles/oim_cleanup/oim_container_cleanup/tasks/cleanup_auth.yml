#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Select only the omnia_auth service name
  ansible.builtin.set_fact:
    auth_services: "{{ ansible_facts['services'].keys() | select('match', '^omnia_auth') | list }}"

- name: Stop all matching omnia_auth services
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    state: stopped
  loop: "{{ auth_services }}"
  when:
    - item in ansible_facts.services
    - ansible_facts.services[item].state == 'running'

- name: Get omnia_auth container files
  ansible.builtin.find:
    paths: "/etc/containers/systemd/"
    patterns: 'omnia_auth*'
    file_type: file
  register: found_files

- name: Get the list of omnia auth paths
  ansible.builtin.set_fact:
    auth_quad_path_list: "{{ found_files.files | map(attribute='path') | list }}"

- name: Remove omnia_auth systemd unit files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ auth_quad_path_list }}"

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

- name: Get podman info for omnia_auth container
  containers.podman.podman_container_info:
    name: "{{ auth_service_container_name }}"
  register: podmen
  no_log: true

- name: Get info about omnia_auth
  containers.podman.podman_container_info:
    name: "{{ auth_service_container_name }}"
  register: podinfo
  failed_when: false  # Do not fail if container doesn't exist

- name: Stop auth service only if it exists
  containers.podman.podman_container:
    name: "{{ auth_service_container_name }}"
    state: stopped
  when: podinfo.containers | length > 0

- name: Remove omnia_auth containers
  containers.podman.podman_container:
    name: "{{ auth_service_container_name }}"
    state: absent
    force_delete: true
  when: podinfo.containers | length > 0

- name: Remove auth cleanup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
    force: true
  register: directory_deletion
  until: directory_deletion is not failed
  retries: "{{ max_retries }}"
  loop: "{{ auth_cleanup_directory }}"

- name: Check if target file exists
  ansible.builtin.stat:
    path: "{{ omnia_target }}"
  register: p

- name: Remove all omnia_auth services
  ansible.builtin.replace:
    path: "{{ omnia_target }}"
    regexp: "{{ auth_service_container_name }}"
    replace: ''
  when: p.stat.exists
