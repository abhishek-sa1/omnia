#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
- name: Gather provision container info from oim
  containers.podman.podman_container_info:
    name: "{{ provision_container_name }}"
  delegate_to: oim
  connection: ssh
  register: provision_container_status
  failed_when: false

- name: Execute node cleanup when provision container is running
  when:
    - provision_container_status.containers | length > 0
    - provision_container_status.containers[0].State.Status == 'running'
  block:
    - name: Check DB connection to PostgreSQL
      community.postgresql.postgresql_info:
        login_user: postgres
        login_password: "{{ postgresdb_password }}"
        db: omniadb
      become: true
      become_user: postgres
      register: db_connection_check
      failed_when: db_connection_check.failed is defined and db_connection_check.failed
      no_log: true
      delegate_to: omnia_provision
      connection: ssh

    - name: Get all discovered oim_ha_nodes from DB
      community.postgresql.postgresql_query:
        db: omniadb
        login_user: postgres
        query: |
          SELECT node, hostname, bmc_ip
          FROM cluster.nodeinfo
          WHERE role = 'oim_ha_node' AND status = 'booted';
        login_password: "{{ postgresdb_password }}"
      become: true
      become_user: postgres
      register: oim_ha_node_info
      failed_when: false
      no_log: true
      delegate_to: omnia_provision
      connection: ssh

    - name: Check if any oim_ha_node was found
      ansible.builtin.debug:
        msg: "Discovered OIM HA Nodes: {{ oim_ha_node_info.query_result }}"
      when:
        - oim_ha_node_info.query_result is defined
        - oim_ha_node_info.query_result | length > 0

    - name: Fetch OIM hostname
      ansible.builtin.command: hostname
      changed_when: false
      register: oim_hostname
      delegate_to: oim
      connection: ssh

    - name: Perform oim_cleanup on oim_ha_node
      ansible.builtin.include_tasks: disable_helper_node_boot.yml
      loop: "{{ oim_ha_node_info.query_result | default([]) | list }}"
      loop_control:
        loop_var: node_info
      when:
        - oim_ha_node_info.query_result is defined
        - oim_ha_node_info.query_result | length > 0
        - oim_hostname.stdout | trim != node_info.hostname | trim
