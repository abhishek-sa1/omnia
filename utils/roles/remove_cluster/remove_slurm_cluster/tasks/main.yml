#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
- name: Validate slurm groups
  ansible.builtin.fail:
    msg: "{{ slurm_inv_fail_msg }}"
  when: groups['slurm_control_node'] is not defined or groups['slurm_node'] is not defined
  run_once: true

- name: Get service facts
  ansible.builtin.service_facts:
  register: slurm_status
  no_log: true # Since Output is large on stdout

- name: Initialize variable
  ansible.builtin.set_fact:
    slurm_output: true

# if any of service is installed set output as false
- name: Check if slurm services exists
  ansible.builtin.set_fact:
    slurm_output: false
  when:
    - "'slurmd.service' not in slurm_status.ansible_facts.services"
    - "'slurmctld.service' not in slurm_status.ansible_facts.services"
    - "'slurmdbd.service' not in slurm_status.ansible_facts.services"

- name: Remove Slurm packages from login_node for NFS
  ansible.builtin.package:
    name: "{{ slurm_packages[ansible_os_family] }}"
    state: absent
  when:
    - hostvars['localhost']['slurm_installation_type'] == "nfs_share"
    - '"login_node" in group_names'

- name: Ignore if slurm services not exists
  when: not slurm_output
  ansible.builtin.debug:
    msg: "{{ slurm_not_exists }}"

- name: Reset slurm configuration
  when: slurm_output
  block:
    - name: Update firewall rules # TODO: port to be read from slurm conf
      ansible.builtin.include_tasks: update_firewall_{{ ansible_os_family | lower }}.yml

    - name: Unset env variable
      community.general.ini_file:
        path: "{{ sys_env_path }}"
        option: "{{ item }}"
        state: absent
        mode: "{{ conf_file_mode }}"
      register: env_modified_list
      loop: "{{ slurm_env_vars }}"

    - name: Enable etc enviroment
      ansible.builtin.shell: source {{ sys_env_path }} # noqa: command-instead-of-shell
      when: (env_modified_list.results | map(attribute='changed')) is any
      register: env_modify_out
      changed_when: env_modify_out.rc == 0

    - name: Stop Slurm services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      with_items: "{{ slurm_services }}"
      failed_when: false

    - name: Remove Slurm group
      ansible.builtin.group:
        name: "{{ slurm_user_group }}"
        state: absent
        force: true

    - name: Remove Slurm user
      ansible.builtin.user:
        name: "{{ slurm_user }}"
        state: absent
        force: true

    - name: Remove Slurm packages
      ansible.builtin.package:
        name: "{{ slurm_packages[ansible_os_family] }}"
        state: absent

    - name: Remove slurmd service
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      with_items: "{{ slurm_services_files }}"
      failed_when: false

    - name: Force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Remove Slurm common configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ slurm_common_files }}"
      failed_when: false

    - name: Remove Slurm configuration files if slurm is installed in configless mode
      when: hostvars['localhost']['slurm_installation_type'] == "configless"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ slurm_configless_files }}"
      failed_when: false

    - name: Remove Slurm configuration files if slurm is installed on NFS share
      when: hostvars['localhost']['slurm_installation_type'] == "nfs_share"
      block:
        - name: Get NFS share path from storage_config.yml
          ansible.builtin.set_fact:
            share_path: "{{ hostvars['localhost']['nfs_client_params']
                            | selectattr('slurm_share', 'equalto', true)
                            | map(attribute='client_share_path') | first }}"
          when:
            - hostvars['localhost']['nfs_client_params'] is defined and hostvars['localhost']['nfs_client_params'] | length > 0
            - hostvars['localhost']['nfs_client_params'] | selectattr('slurm_share', 'defined') | selectattr('slurm_share', 'equalto', true) | list | length == 1 # noqa: yaml[line-length]

        - name: Remove slurm related files from NFS share
          when: share_path is defined
          run_once: true
          block:
            - name: Check whether slurm folder exists in NFS share
              ansible.builtin.stat:
                path: "{{ share_path }}{{ slurm_nfs_folder }}"
              register: file_stat

            - name: Remove slurm directory
              ansible.builtin.file:
                path: "{{ share_path }}{{ slurm_nfs_folder }}"
                state: absent
              when: file_stat.stat.exists
              # failed_when: false
