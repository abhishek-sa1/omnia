# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# get_pulp_rpm_dist
- name: Validate repo configuration
  block:
    - name: Check pulp distribution command
      ansible.builtin.command: "{{ pulp_bin_path }} rpm distribution list"
      delegate_to: localhost
      register: check_pulp_repo
      changed_when: false

    - name: Set fact for distribution paths
      ansible.builtin.set_fact:
        pulp_dist_result: "{{ check_pulp_repo.stdout | from_json | rekey_on_member('name') }}"
      when: check_pulp_repo.stdout is defined and (check_pulp_repo.stdout | length > 0)
  rescue:
    - name: Failed - pulp repo is not configured
      ansible.builtin.fail:
        msg: "{{ repo_fail_msg }}"

# update_user_repo
- name: Iniatiate the repo
  ansible.builtin.set_fact:
    repo_list: []

- name: Initialise facts for cluster
  ansible.builtin.set_fact:
    beegfs_version: "{{ software_version_default }}"
    amdgpu_version: "{{ software_version_default }}"
    rocm_version: "{{ software_version_default }}"

- name: Set facts for cluster
  ansible.builtin.set_fact:
    cluster_os_type: "{{ software_config.cluster_os_type }}"
    cluster_os_version: "{{ software_config.cluster_os_version }}"

- name: Add repo to repo_list
  ansible.builtin.set_fact:
    repo_list: "{{ repo_list + user_repo_url }}"

# update_software_repo
- name: Set fact for software version from software_config json
  ansible.builtin.set_fact:
    version_dict: "{{ version_dict | default({}) | combine({item.name: item.name + '_' + item.version}) }}"
    "{{ item.name }}_version": "{{ item.version }}"
  loop: "{{ software_config.softwares + software_config.amdgpu | default([]) }}"
  when: item.name in versioned_softwares
  loop_control:
    loop_var: item

- name: Process omnia_repo_urls in one line
  ansible.builtin.set_fact:
    omnia_repo_url_processed: "{{ omnia_repo_url_processed | default([]) | list
     + [item | combine({'name': version_dict[item.name]}) if item.name in version_dict.keys() else item] }}"
  loop: "{{ omnia_repo_url_rhel | default([]) }}"
  loop_control:
    loop_var: item

- name: Add repo to repo_list
  ansible.builtin.set_fact:
    repo_list: "{{ repo_list + omnia_repo_url_processed }}"

# Generate repo files for all the repos collected
- name: Loop through user repos and configure repofile
  ansible.builtin.template:
    src: "rpm_repo_config.j2"
    dest: "{{ repo_path }}/{{ repo.name }}.repo"
    mode: "{{ file_permission }}"
  loop: "{{ repo_list }}"
  when: repo.name in pulp_dist_result.keys()
  loop_control:
    loop_var: repo

# Finishing
- name: Clean the yum repos cache
  ansible.builtin.command: dnf clean all
  changed_when: true

# handler
- name: Execute update repos
  when: repos_update_status | default(false)
  block:
    - name: Update yum repos cache
      ansible.builtin.dnf:
        update_cache: true
      register: update_repos
      until: update_repos is not failed
      retries: "{{ repo_retries }}"
      delay: "{{ repo_delay }}"

  rescue:
    - name: Update cache failure
      ansible.builtin.fail:
        msg: "{{ repo_update_failure_msg }}"

- name: Run repolist command
  ansible.builtin.command: dnf repolist
  changed_when: false
  register: dnf_repolist

- name: Print repolist output
  ansible.builtin.debug:
    var: dnf_repolist.stdout_lines
