# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize username status
  ansible.builtin.set_fact:
    username_status: true
    password_status: true
  when:
    - field.username is defined
    - vars[field.username] is defined
    - (vars[field.username] | length == 0)
    - field.username is not search('switch')

- name: Initialize password status
  ansible.builtin.set_fact:
    password_status: true
  when:
    - field.password is defined
    - vars[field.password] is defined
    - (vars[field.password] | length == 0)
    - field.password is not search('switch')

- name: Prompt credentials for "{{ service.key }} - {{ type.key }}" # noqa name[template]
  when:
    - username_status or password_status
  block:
    - name: Fetch username if empty # noqa name[template]
      when: username_status
      block:
        - name: Fetch credential rule for "{{ field.username | default('Username') }}" # noqa name[template]
          fetch_credential_rule:
            credential_field: "{{ field.username }}"
            module_utils_path: "{{ module_utils_path }}"
          register: credential_rule

        - name: Prompt user for "{{ field.username | default('Username') }}" # noqa name[template]
          ansible.builtin.pause:
            prompt: "[{{ field.username }}] {{ lookup('vars', type.key ~ '_input') }} {{ credential_rule.msg }} Enter value"
          no_log: true
          register: username_input

        - name: Validate mandatory username not empty
          ansible.builtin.fail:
            msg: "{{ mandatory_credentials_msg }}"
          when:
            - mandatory_credentials_status
            - username_input.user_input | length == 0

        - name: Set username status when username is empty for OPTIONAL credential
          ansible.builtin.set_fact:
            username_status: false
            password_status: false
          when:
            - not mandatory_credentials_status
            - username_input.user_input | length == 0

        - name: Validate input credential - "{{ field.username | default('Username') }}" # noqa name[template]
          validate_credentials:
            credential_field: "{{ field.username }}"
            credential_input: "{{ username_input.user_input }}"
            module_utils_path: "{{ module_utils_path }}"
          when: username_input.user_input | length != 0

      rescue:
        - name: Invalid Username provided
          ansible.builtin.include_tasks: encrypt_credentials_file.yml

        - name: Failed to credentials with entered username
          ansible.builtin.fail:
            msg: "{{ username_fail_msg }}"

    - name: Fetch "{{ field.password | default('Password') }}" if empty # noqa name[template]
      when: password_status
      block:
        - name: Fetch credential rule for "{{ field.password | default('Password') }}" # noqa name[template]
          fetch_credential_rule:
            credential_field: "{{ field.password }}"
            module_utils_path: "{{ module_utils_path }}"
          register: credential_rule

        - name: Prompt user for "{{ field.password | default('Password') }}" # noqa name[template]
          ansible.builtin.pause:
            prompt: "[{{ field.password }}] {{ lookup('vars', type.key ~ '_input') }} {{ credential_rule.msg }} Enter value"
            echo: false
          no_log: true
          register: password_input

        - name: Validate mandatory password not empty
          ansible.builtin.fail:
            msg: "{{ mandatory_password_fail_msg }}"
          when:
            - username_status or mandatory_credentials_status
            - password_input.user_input | length == 0

        - name: Validate input credential - "{{ field.password | default('Password') }}" # noqa name[template]
          validate_credentials:
            credential_field: "{{ field.password }}"
            credential_input: "{{ password_input.user_input }}"
            module_utils_path: "{{ module_utils_path }}"
          when: password_input.user_input | length != 0

        - name: Prompt user to confirm "{{ field.password | default('Password') }}" # noqa name[template]
          ansible.builtin.pause:
            prompt: "Confirm [{{ type.key }}] - {{ field.password }}"
            echo: false
          no_log: true
          register: confirm_password
          when: password_input.user_input | length != 0

        - name: Ensure passwords match
          ansible.builtin.fail:
            msg: "{{ password_match_fail_msg }}"
          when:
            - password_input.user_input | length != 0
            - password_input.user_input != confirm_password.user_input

        - name: Set username status when username is empty for OPTIONAL credential
          ansible.builtin.set_fact:
            username_status: false
            password_status: false
          when:
            - password_input.user_input | length == 0

      rescue:
        - name: Invalid Password provided
          ansible.builtin.include_tasks: encrypt_credentials_file.yml

        - name: Failed to fetch credentials with entered password
          ansible.builtin.fail:
            msg: "{{ password_fail_msg }}"

    - name: Update vars file with entered username
      ansible.builtin.lineinfile:
        path: "{{ omnia_credential_file }}"
        regexp: '^{{ field.username }}:'
        line: "{{ field.username }}: \"{{ username_input.user_input }}\""
      no_log: true
      when:
        - username_status

    - name: Update vars file with entered password
      ansible.builtin.lineinfile:
        path: "{{ omnia_credential_file }}"
        regexp: '^{{ field.password }}:'
        line: "{{ field.password }}: \"{{ password_input.user_input }}\""
      no_log: true
      when:
        - password_status

    - name: Include updated omnia_credentials.yml
      ansible.builtin.include_vars: "{{ omnia_credential_file }}"
      register: include_omnia_credentials
      no_log: true

    - name: Reset credentials status
      ansible.builtin.set_fact:
        username_status: false
        password_status: false
