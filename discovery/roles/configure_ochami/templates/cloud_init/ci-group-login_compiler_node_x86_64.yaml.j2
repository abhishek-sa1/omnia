- name: {{ functional_group_name }}
  description: "{{ functional_group_name }} config"
  file:
    encoding: plain
    content: |
      ## template: jinja
      #cloud-config
      merge_how:
      - name: list
        settings: [append]
      - name: dict
        settings: [no_replace, recurse_list]
      users:
        - name: root
          ssh_authorized_keys: "{{ read_ssh_key.stdout }}"
      disable_root: false

      write_files:
        - path: /usr/local/bin/set-hostname-by-mac.sh
          permissions: '0755'
          content: |
            #!/bin/bash
            # Autogenerated hostname & IP setter based on NIC MAC
            DOMAIN_NAME={{ hostvars['localhost']['domain_name'] }}
            for IFACE in /sys/class/net/*; do
                MAC=$(cat $IFACE/address | tr '[:upper:]' '[:lower:]')
                case $MAC in
                {% for node in nodes %}
                {{ node.interfaces[0].mac_addr | lower }}) HOST={{ node.name }} IP={{ node.interfaces[0].ip_addrs[0].ip_addr }} ;;
                {% endfor %}
                esac
            done

            if [ -n "$HOST" ]; then
                if ! grep -q "$HOST" /etc/hosts; then
                    echo "$IP $HOST.$DOMAIN_NAME" >> /etc/hosts
                fi
                hostnamectl set-hostname "$HOST.$DOMAIN_NAME"
                sysctl kernel.hostname=$HOST.$DOMAIN_NAME
            fi

            echo 'root:{{ hostvars['localhost']['provision_password'] }}' | chpasswd
            timedatectl set-timezone {{ hostvars['localhost']['timezone'] }}
            sed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
            sed -i 's/^#PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config.d/50-cloud-init.conf
            systemctl restart sshd

        - path: /etc/hosts
          append: true
          content: |
{% for key in ip_name_map | sort %}
            {{ ip_name_map[key] }} {{ key }}
{% endfor %}


      runcmd:
        - /usr/local/bin/set-hostname-by-mac.sh
        - useradd -mG wheel -p '$6$VHdSKZNm$O3iFYmRiaFQCemQJjhfrpqqV7DdHBi5YpY6Aq06JSQpABPw.3d8PQ8bNY9NuZSmDv7IL/TsrhRJ6btkgKaonT.' testuser
        - groupadd -r slurm
        - useradd -r -g slurm -d /var/lib/slurm -s /sbin/nologin slurm

        - mkdir -p /var/log/slurm /var/run/slurm /var/spool /var/lib/slurm /etc/slurm/epilog.d /etc/munge
        - echo "{{ cloud_init_nfs_path }}/$(hostname -s)/var/log/slurm  /var/log/slurm   nfs defaults,_netdev 0 0" >> /etc/fstab
        - echo "{{ cloud_init_nfs_path }}/$(hostname -s)/var/spool      /var/spool       nfs defaults,_netdev 0 0" >> /etc/fstab
        - echo "{{ cloud_init_nfs_path }}/$(hostname -s)/etc/slurm/epilog.d     /etc/slurm/epilog.d      nfs defaults,_netdev 0 0" >> /etc/fstab
        - echo "{{ cloud_init_nfs_path }}/$(hostname -s)/var/spool      /var/spool       nfs defaults,_netdev 0 0" >> /etc/fstab
        - echo "{{ cloud_init_nfs_path }}/$(hostname -s)/etc/munge      /etc/munge       nfs defaults,_netdev 0 0" >> /etc/fstab
        - chmod 644 /etc/fstab
        - mount -a
        - yes | cp /etc/slurm/epilog.d/slurmd.service /usr/lib/systemd/system/
        - chown -R slurm:slurm /var/log/slurm
        - chown -R slurm:slurm /var/run/slurm
        - chown -R slurm:slurm /var/spool
        - chown -R slurm:slurm /var/lib/slurm
        - chown -R munge:munge /etc/munge/munge.key
        - chmod 755 /var/log/slurm /var/run/slurm /var/spool /var/lib/slurm
        - chmod 400 /etc/munge/munge.key
        - chmod 755 /etc/slurm/epilog.d/
        - chmod +x /etc/slurm/epilog.d/logout_user.sh
        - mkdir -p /var/spool/slurmd
        - chmod 755 /var/spool/slurmd
        - chown -R slurm:slurm /var/spool/slurmd


        - sed -i '/^password\s\+include\s\+password-auth/i account    required    pam_slurm_adopt.so action_no_jobs=deny' /etc/pam.d/sshd

        - setenforce 0
        - systemctl stop firewalld
        - systemctl disable firewalld
        - systemctl enable sshd
        - systemctl start sshd
        - systemctl enable munge
        - systemctl start munge
        - systemctl enable slurmd
        - systemctl start slurmd
        - systemctl daemon-reexec
        - systemctl restart sshd

        # Add NFS entry and mount
        - mkdir -p {{ client_mount_path }}
        - echo "{{ nfs_src }} {{ client_mount_path }} nfs defaults,_netdev 0 0" >> /etc/fstab
        - mount -a

        # UCX build and install
        - |
          UCX_BIN={{ client_mount_path }}/benchmarks/ucx
          mkdir -p {{ client_mount_path }}/compile/ucx
          mkdir -p {{ client_mount_path }}/benchmarks/ucx
          cd {{ client_mount_path }}/compile/ucx
          wget --no-check-certificate https://{{ hostvars['localhost']['admin_nic_ip'] }}:2225/pulp/content/opt/omnia/offline_repo/cluster/x86_64/{{ hostvars['localhost']['cluster_os_type'] }}/{{ hostvars['localhost']['cluster_os_version'] }}/tarball/ucx/ucx.tar.gz
          tar xzf ucx.tar.gz
          cd ucx-*
          mkdir -p build
          cd build
          ../contrib/configure-release --prefix={{ client_mount_path }}/benchmarks/ucx
          make -j 8
          make install

        # OpenMPI build and install with UCX + Slurm detection
        - |
          OPENMPI_INSTALL_PREFIX="{{ client_mount_path }}/benchmarks/openmpi"
          OPENMPI_SRC="{{ client_mount_path }}/compile/openmpi"
          mkdir -p $OPENMPI_SRC
          mkdir -p $OPENMPI_INSTALL_PREFIX

          cd $OPENMPI_SRC
          wget --no-check-certificate https://{{ hostvars['localhost']['admin_nic_ip'] }}:2225/pulp/content/opt/omnia/offline_repo/cluster/x86_64/{{ hostvars['localhost']['cluster_os_type'] }}/{{ hostvars['localhost']['cluster_os_version'] }}/tarball/openmpi/openmpi.tar.gz
          tar xzf openmpi.tar.gz
          cd openmpi-*
          mkdir -p build

          # Check Slurm
          if sinfo >/dev/null 2>&1; then
            SLURM_FLAG="--with-slurm=yes"
          else
            SLURM_FLAG="--with-slurm=no"
          fi

          # Check UCX
          if [ -x "{{ client_mount_path }}/benchmarks/ucx/bin/ucx_info" ]; then
            {{ client_mount_path }}/benchmarks/ucx/bin/ucx_info -v
            if [ $? -eq 0 ]; then
              UCX_FLAG="--with-ucx={{ client_mount_path }}/benchmarks/ucx"
            else
              echo "ucx_info failed, disabling UCX"
              UCX_FLAG=""
            fi
          else
            echo "ucx_info not found, disabling UCX"
            UCX_FLAG=""
          fi

          cd build
          ../configure --prefix=$OPENMPI_INSTALL_PREFIX \
            --enable-mpi1-compatibility \
            --enable-prte-prefix-by-default \
            $SLURM_FLAG $UCX_FLAG 2>&1 | tee config.out

          make -j 8
          make install
            
