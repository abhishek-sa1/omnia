# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Configure the ochami
  environment: "{{ hostvars['oim']['ochami_env'] }}"
  block:
    - name: Set openchami SELinux context
      ansible.builtin.command: chcon -R system_u:object_r:container_file_t:s0 "{{ hostvars['localhost']['oim_shared_path'] }}/omnia/openchami"
      changed_when: true
      failed_when: false

    - name: Include openchami vars
      ansible.builtin.include_vars: "{{ openchami_config_vars_path }}"

    - name: Create ochami nodes directory
      ansible.builtin.file:
        path: "{{ nodes_dir }}"
        state: directory
        mode: "{{ hostvars['localhost']['dir_permissions_755'] }}"

    - name: Load the openchami nodes.yaml
      ansible.builtin.template:
        src: "{{ openchami_nodes_template }}"
        dest: "{{ openchami_nodes_vars_path }}"
        mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
      vars:
        nodes: "{{ hostvars['localhost']['read_mapping_file']['dict'] | dict2items }}"

    - name: Create telemetry directory
      ansible.builtin.file:
        path: "{{ telemetry_share_path }}"
        state: directory
        mode: "{{ hostvars['localhost']['dir_permissions_755'] }}"

    - name: Load BMC-group data file
      ansible.builtin.template:
        src: "{{ bmc_group_data_template }}"
        dest: "{{ bmc_group_data_file }}"
        mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
      vars:
        nodes: "{{ hostvars['localhost']['read_mapping_file']['dict'] | dict2items }}"
        group_data: "{{ (lookup('file', hostvars['localhost']['input_project_dir'] ~ '/functional_groups_config.yml') | from_yaml).groups }}"

    - name: Delete smd configuration
      ansible.builtin.include_tasks: delete_smd_config.yml

    - name: Discover ochami nodes
      block:
        - name: Discover ochami nodes
          ansible.builtin.command: /usr/bin/ochami discover static -f yaml -d @"{{ openchami_nodes_vars_path }}" --overwrite
          changed_when: true
          register: openchami_discover
      rescue:
        - name: Failed to discover nodes
          ansible.builtin.debug:
            msg: "{{ discover_fail_msg }}. Error: {{ openchami_discover.stderr_lines }}"

    - name: Verify node created in smd
      ansible.builtin.shell: |
        set -o pipefail && \
        /usr/bin/ochami smd component get | jq '.Components[] | select(.Type == "Node")'
      changed_when: true
      register: openchami_smd_status

    - name: Openchami smd status output
      ansible.builtin.debug:
        msg: "{{ openchami_smd_status.stdout_lines }}"
        verbosity: 2

    - name: Load the openchami hostname.yaml
      ansible.builtin.template:
        src: "{{ openchami_hostname_template }}"
        dest: "{{ openchami_hostname_vars_path }}"
        mode: "{{ hostvars['localhost']['file_permissions_644'] }}"
      vars:
        nodes: "{{ hostvars['localhost']['read_mapping_file']['dict'] | dict2items }}"

    - name: Configure the hostname
      ansible.builtin.command: /usr/bin/ochami cloud-init node set -f yaml -d @"{{ openchami_hostname_vars_path }}"
      changed_when: true
