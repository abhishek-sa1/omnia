# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Include variable file omnia_config.yml
  ansible.builtin.include_vars: "{{ input_project_dir }}/omnia_config.yml"

- name: Include storage vars
  ansible.builtin.include_vars: "{{ input_project_dir }}/storage_config.yml"

- name: Set facts for slurm
  ansible.builtin.set_fact:
    nfs_storage_name: "{{ slurm_cluster[0].nfs_storage_name }}"

- name: Read the slurm mount point
  ansible.builtin.set_fact:
    share_path: "{{ (nfs_client_params | selectattr('nfs_name', 'equalto', nfs_storage_name) | first).client_share_path }}"

- name: Get the slurm hostnames
  ansible.builtin.include_tasks: read_slurm_hostnames.yml

- name: Set facts for slurm
  ansible.builtin.set_fact:
    cluster_name: "{{ slurm_cluster[0].cluster_name }}"
    slurm_installation_type: "{{ slurm_cluster[0].installation_type }}"
    restart_slurm_services: "{{ slurm_cluster[0].restart_slurm_services }}"
    slurm_config_path: "{{ share_path }}/{{ slurm_dir_name }}"

- name: Set facts for slurm
  ansible.builtin.set_fact:
    share_prefix: "{{ slurm_config_path }}"
  when: conf_in_nfs

- name: Create the slurm directory on share
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "{{ common_mode }}"
  loop:
    - "{{ slurm_config_path }}"
    - "{{ slurm_config_path }}etc"
    - "{{ slurm_config_path }}etc/munge"
    - "{{ slurm_config_path }}etc/slurm"
    - "{{ slurm_config_path }}etc/slurm/epilog.d"
    - "{{ slurm_config_path }}etc/my.cnf.d"
    - "{{ slurm_config_path }}var"
    - "{{ slurm_config_path }}var/lib"
    - "{{ slurm_config_path }}var/lib/mysql"
    - "{{ slurm_config_path }}var/log"
    - "{{ slurm_config_path }}var/log/mariadb"
    - "{{ slurm_config_path }}var/log/slurm"
    - "{{ slurm_config_path }}var/log/spool"
    - "{{ slurm_config_path }}cloud_init_out" #TODO: cloud inits

- name: Check if munge key exists
  ansible.builtin.stat:
    path: "{{ slurm_config_path }}etc/munge/munge.key"
  register: munge_present

- name: Ensure munge key is generated
  ansible.builtin.shell: "{{ munge_key_cmd }} > {{ slurm_config_path }}etc/munge/munge.key"
  when: not munge_present.stat.exists

- name: Slurm dict ops
  ansible.builtin.set_fact:
    slurm_conf_dict: "{{ __slurm_default_config | ansible.builtin.combine(slurm_config | default({})) }}"
    cgroup_conf_dict: "{{ __cgroup_default_config | ansible.builtin.combine(cgroup | default({})) }}"
    slurm_dbd_conf_dict: "{{ __slurm_dbd_default_config | ansible.builtin.combine(slurm_dbd_config | default({})) }}"

- name: Verify slurm conf keys only
  ansible.builtin.assert:
    that:
      - (slurm_conf_dict.keys() | list) | difference(__slurm_conf_keys) | length == 0
      # TODO: Add support for cgroup and slurmdbd
    fail_msg: "The following slurm config keys are invalid: {{ slurm_conf_dict.keys() | list | difference(__slurm_conf_keys) | join(', ') }}"

- name: Create slurm.conf for ctld only
  ansible.builtin.template:
    src: "{{ item }}.conf.j2"
    dest: "{{ slurm_config_path }}etc/slurm/{{ item }}.conf"
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ conf_file_mode }}"
  loop:
    - slurm
    - slurmdbd
    - cgroup

- name: Create mariadb cnf
  ansible.builtin.template:
    src: "mariadb-server.cnf.j2"
    dest: "{{ slurm_config_path }}etc/my.cnf.d/mariadb-server.cnf"
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ conf_file_mode }}"

- name: Create epilog script
  ansible.builtin.template:
    src: "logout_user.sh.j2"
    dest: "{{ slurm_config_path }}etc/slurm/epilog.d/logout_user.sh"
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ conf_file_mode }}"

- name: Generate slurmd opts for Configless
  ansible.builtin.set_fact:
    conf_server: "--conf-server {{ ctld_list | map('regex_replace', '$', ':' ~ (slurm_conf_dict['SlurmctldPort'] | string)) | join(',') }}"

- name: Create slurmd service file for configless mode
  ansible.builtin.template:
    src: "slurmd.service.j2"
    dest: "{{ slurm_config_path }}slurmd.service"
    owner: "{{ root_user }}"
    group: "{{ root_group }}"
    mode: "{{ conf_file_mode }}"

- name: Mount facts items to dict
  ansible.builtin.set_fact:
    mounted_dict: "{{ ansible_mounts | items2dict(key_name='mount', value_name='device') }}"

- name: Get the slurm NFS path
  ansible.builtin.debug:
    msg: "The slurm NFS path is {{ mounted_dict[share_path] }}/slurm"

- name: NFS path for cloud init
  ansible.builtin.set_fact: 
    cloud_init_nfs_path: "{{ mounted_dict[share_path] }}/slurm"

- name: Generate cloud init
  ansible.builtin.include_tasks: cloud_inits.yml