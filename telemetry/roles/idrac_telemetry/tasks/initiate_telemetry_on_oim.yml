# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include and initialize variables
- name: Initiate telemetry process if idrac_support is enabled
  when: hostvars['localhost']['idrac_telemetry_support']
  block:
    - name: Set server host
      ansible.builtin.set_fact:
        node_host: >-
          {{
            hostvars[inventory_hostname]['service_tag']
            if inventory_hostname != 'localhost'
            else 'oim'
          }}

    - name: Include telemetry common vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/telemetry_validation/vars/main.yml"
      no_log: true

    - name: Initialize variables
      ansible.builtin.set_fact:
        telemetry_idrac: []
        service_type: 3
        auth_type: 1
        idrac_ip_count: 0
        telemetry_idrac_count: 0
        failed_idrac_count: 0
        failed_idrac: []

    - name: Fetch and filter iDRAC details from mysqlDB
      block:
        - name: Add iDRAC host in mysqlDB
          block:
            - name: Check if services table exists
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SHOW TABLES FROM {{ mysqldb_name }}"
              register: services_table_exists
              until: services_table_exists is not failed and services_table_exists.query_result[0] | length != 0
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Fetch iDRAC details of telemetry configured iDRACs
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SELECT ip from {{ mysqldb_name + '.services' }}"
              register: db_idrac_ip
              until: db_idrac_ip is not failed
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Extract list of IPs from query_result
              ansible.builtin.set_fact:
                db_idrac_ip_list: "{{ db_idrac_ip.query_result[0] | map(attribute='ip') | list }}"

            - name: Generate filtered iDRAC IP list
              ansible.builtin.set_fact:
                filtered_bmc_ip_list: "{{ hostvars['localhost']['bmc_ips'][node_host] | difference(db_idrac_ip_list) }}"
      rescue:
        - name: Failed to connect mysqldb
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg }}"

    - name: Convert filtered_bmc_ip_list to a dictionary with bmc_ip
      ansible.builtin.set_fact:
        filtered_bmc_ip_dict_list: "{{ filtered_bmc_ip_list | map('community.general.dict_kv', 'bmc_ip') | list }}"

    - name: Validate BMC reachability
      update_bmc_group_entry:
        nodes: "{{ filtered_bmc_ip_dict_list }}"
        bmc_username: "{{ hostvars['localhost']['bmc_username'] }}"
        bmc_password: "{{ hostvars['localhost']['bmc_password'] }}"
        verify_bmc: true
      register: bmc_result

    - name: Show verified BMC entries
      when: bmc_result.verified_bmc | length > 0
      ansible.builtin.debug:
        msg: "BMC entries valid for IPs: {{ bmc_result.verified_bmc | join(', ') }}"

    - name: Show Redfish Disabled Warning
      when: bmc_result.redfish_disabled | length > 0
      ansible.builtin.debug:
        msg: "{{ redfish_disabled_msg | replace('\n', ' ') }}"

    - name: Show Invalid BMC Credentials
      when: bmc_result.invalid_creds | length > 0
      ansible.builtin.debug:
        msg: "{{ invalid_creds_msg | replace('\n', ' ') }}"

    - name: Show Unreachable BMC IPs
      when: bmc_result.unreachable_bmc | length > 0
      ansible.builtin.debug:
        msg: >-
          {{
            unreachable_oim_bmc_msg | replace('\n', ' ')
            if node_host == 'oim'
            else unreachable_service_node_bmc_msg | replace('\n', ' ')
          }}

    - name: Warning for user to fix BMC issues
      when: >
        (bmc_result.redfish_disabled | length > 0) or
        (bmc_result.invalid_creds | length > 0) or
        (bmc_result.unreachable_bmc | length > 0)
      ansible.builtin.pause:
        seconds: "{{ waiting_time_30 }}"
        prompt: "{{ invalid_bmc_warning_msg }}"

    - name: Set fact for BMC IPs validation bmc bmc result
      ansible.builtin.set_fact:
        idrac_redfish_disabled: "{{ bmc_result.redfish_disabled }}"
        idrac_invalid_creds: "{{ bmc_result.invalid_creds }}"
        idrac_unreachable: "{{ bmc_result.unreachable_bmc }}"
        invalid_idrac_count: >-
          {{ (bmc_result.invalid_creds + bmc_result.unreachable_bmc + bmc_result.redfish_disabled) | length }}
        invalid_idrac_list: >-
          {{ bmc_result.invalid_creds + bmc_result.unreachable_bmc + bmc_result.redfish_disabled }}

    - name: Filter iDRACs based on telemetry pre-requisites
      block:
        - name: Filter iDRACs matching telemetry pre-requisites (This task may take more time based on number of iDRACs)
          idrac_telemetry_filter:
            bmc_ip_list: "{{ bmc_result.verified_bmc }}"
            bmc_username: "{{ hostvars['localhost']['bmc_username'] }}"
            bmc_password: "{{ hostvars['localhost']['bmc_password'] }}"
            min_firmware_version_reqd: "{{ min_firmware_version_reqd }}"
          register: filter_idrac_output
          when:
            - bmc_result.verified_bmc is defined
            - bmc_result.verified_bmc | length > 0
      rescue:
        - name: Failed to filter iDRACs
          ansible.builtin.fail:
            msg: "{{ filter_idrac_fail_msg }} Error: {{ filter_idrac_output.msg }}"

    - name: Update the telemetry variables with filtered iDRACs
      ansible.builtin.set_fact:
        telemetry_idrac: "{{ filter_idrac_output.telemetry_idrac }}"
        telemetry_idrac_count: "{{ filter_idrac_output.telemetry_idrac_count }}"
        failed_idrac_count: "{{ filter_idrac_output.failed_idrac_count }}"
        failed_idrac: "{{ filter_idrac_output.failed_idrac }}"
      when:
        - filter_idrac_output.telemetry_idrac is defined
        - filter_idrac_output.telemetry_idrac_count is defined

    - name: Enable telemetry collection on iDRAC
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Enable telemetry collection on iDRACs
          ansible.builtin.command: >-
            python3 ./ConfigurationScripts/EnableOrDisableAllTelemetryReports.py -ip "{{ item }}"
            -u "{{ hostvars['localhost']['bmc_username'] }}" -p "{{ hostvars['localhost']['bmc_password'] }}" -s Enabled
          args:
            chdir: "{{ telemetry_dir_path }}/{{ idrac_telemetry_scripting_folder }}"
          with_items: "{{ telemetry_idrac }}"
          changed_when: false
          no_log: true
      rescue:
        - name: Failed to enable the iDRAC telemetry
          ansible.builtin.debug:
            msg: "{{ idrac_telemetry_enable_fail_msg | replace('\n', ' ') }}"

    - name: Add iDRAC details in mysqldb
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Add iDRAC host in mysqlDB
          community.mysql.mysql_query:
            login_host: "{{ mysqldb_host }}"
            login_port: "{{ mysqldb_container_port }}"
            login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
            login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
            login_db: "{{ mysqldb_name }}"
            query: INSERT IGNORE INTO {{ mysqldb_name + '.services' }} (ip, serviceType, authType, auth)
                  VALUES (%s, %s, %s ,'{"password":"{{ hostvars['localhost']['bmc_password'] | quote }}","username":"{{ hostvars['localhost']['bmc_username'] | quote }}"}') # noqa: yaml[line-length]
            positional_args:
              - "{{ item }}"
              - "{{ service_type }}"
              - "{{ auth_type }}"
          with_items: "{{ telemetry_idrac }}"
          register: add_idrac_to_db
          until: add_idrac_to_db is not failed
          retries: "{{ db_retries }}"
          delay: "{{ db_delay }}"
          no_log: true
      rescue:
        - name: Failed to connect mysqldb
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg | replace('\n', ' ') }}"
