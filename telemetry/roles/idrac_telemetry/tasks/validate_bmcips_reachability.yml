# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Validate BMC reachability
  update_bmc_group_entry:
    nodes: "{{ filtered_bmc_ip_dict_list }}"
    bmc_username: "{{ hostvars['localhost']['bmc_username'] }}"
    bmc_password: "{{ hostvars['localhost']['bmc_password'] }}"
    verify_bmc: true
  register: bmc_result

- name: Show verified BMC entries
  when: bmc_result.verified_bmc | length > 0
  ansible.builtin.debug:
    msg: "BMC entries valid for IPs: {{ bmc_result.verified_bmc | join(', ') }}"

- name: Show Redfish Disabled Warning
  when: bmc_result.redfish_disabled | length > 0
  ansible.builtin.debug:
    msg: "{{ redfish_disabled_msg | replace('\n', ' ') }}"

- name: Show Invalid BMC Credentials
  when: bmc_result.invalid_creds | length > 0
  ansible.builtin.debug:
    msg: "{{ invalid_creds_msg | replace('\n', ' ') }}"

- name: Show Unreachable BMC IPs
  when: bmc_result.unreachable_bmc | length > 0
  ansible.builtin.debug:
    msg: >-
      {{ unreachable_service_node_bmc_msg | replace('\n', ' ') }}

- name: Warning for user to fix BMC issues
  when: >
    (bmc_result.redfish_disabled | length > 0) or
    (bmc_result.invalid_creds | length > 0) or
    (bmc_result.unreachable_bmc | length > 0)
  ansible.builtin.pause:
    seconds: "{{ waiting_time_30 }}"
    prompt: "{{ invalid_bmc_warning_msg }}"

- name: Set fact for BMC IPs validation bmc bmc result
  ansible.builtin.set_fact:
    idrac_redfish_disabled: "{{ bmc_result.redfish_disabled }}"
    idrac_invalid_creds: "{{ bmc_result.invalid_creds }}"
    idrac_unreachable: "{{ bmc_result.unreachable_bmc }}"
    invalid_idrac_count: >-
      {{ (bmc_result.invalid_creds + bmc_result.unreachable_bmc + bmc_result.redfish_disabled) | length }}
    invalid_idrac_list: >-
      {{ bmc_result.invalid_creds + bmc_result.unreachable_bmc + bmc_result.redfish_disabled }}

- name: Filter iDRACs based on telemetry pre-requisites
  block:
    - name: Filter iDRACs matching telemetry pre-requisites (This task may take more time based on number of iDRACs)
      idrac_telemetry_filter:
        bmc_ip_list: "{{ bmc_result.verified_bmc }}"
        bmc_username: "{{ hostvars['localhost']['bmc_username'] }}"
        bmc_password: "{{ hostvars['localhost']['bmc_password'] }}"
        min_firmware_version_reqd: "{{ min_firmware_version_reqd }}"
      register: filter_idrac_output
      when:
        - bmc_result.verified_bmc is defined
        - bmc_result.verified_bmc | length > 0
  rescue:
    - name: Failed to filter iDRACs
      ansible.builtin.fail:
        msg: "{{ filter_idrac_fail_msg }} Error: {{ filter_idrac_output.msg }}"

- name: Update the telemetry variables with filtered iDRACs
  ansible.builtin.set_fact:
    telemetry_idrac: "{{ filter_idrac_output.telemetry_idrac }}"
    telemetry_idrac_count: "{{ filter_idrac_output.telemetry_idrac_count }}"
    failed_idrac_count: "{{ filter_idrac_output.failed_idrac_count }}"
    failed_idrac: "{{ filter_idrac_output.failed_idrac }}"
  when:
    - filter_idrac_output.telemetry_idrac is defined
    - filter_idrac_output.telemetry_idrac_count is defined

- name: Enable telemetry collection on iDRAC
  when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
  block:
    - name: Enable telemetry collection on iDRACs
      ansible.builtin.command: >-
        python3 ./ConfigurationScripts/EnableOrDisableAllTelemetryReports.py -ip "{{ item }}"
        -u "{{ hostvars['localhost']['bmc_username'] }}" -p "{{ hostvars['localhost']['bmc_password'] }}" -s Enabled
      args:
        chdir: "{{ idrac_telemetry_scripting_git_clone_path }}"
      with_items: "{{ telemetry_idrac }}"
      changed_when: false
      no_log: true
  rescue:
    - name: Failed to enable the iDRAC telemetry
      ansible.builtin.debug:
        msg: "{{ idrac_telemetry_enable_fail_msg | replace('\n', ' ') }}"
