# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include and initialize variables
- name: Initiate telemetry process if idrac_support is enabled
  when: hostvars['localhost']['idrac_telemetry_support']
  block:
    - name: Set server host
      ansible.builtin.set_fact:
        node_host: >-
          {{
            hostvars[inventory_hostname]['service_tag']
            if inventory_hostname != 'localhost'
            else 'oim'
          }}

    - name: Include telemetry common vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/telemetry_validation/vars/main.yml"
      no_log: true

    - name: Initialize variables
      ansible.builtin.set_fact:
        telemetry_idrac: []
        service_type: 3
        auth_type: 1
        idrac_ip_count: 0
        telemetry_idrac_count: 0
        failed_idrac_count: 0
        failed_idrac: []

    - name: Fetch and filter iDRAC details from mysqlDB
      block:
        - name: Add iDRAC host in mysqlDB
          block:
            - name: Check if services table exists
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SHOW TABLES FROM {{ mysqldb_name }}"
              register: services_table_exists
              until: services_table_exists is not failed and services_table_exists.query_result[0] | length != 0
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Fetch iDRAC details of telemetry configured iDRACs
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SELECT ip from {{ mysqldb_name + '.services' }}"
              register: db_idrac_ip
              until: db_idrac_ip is not failed
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Extract list of IPs from query_result
              ansible.builtin.set_fact:
                db_idrac_ip_list: "{{ db_idrac_ip.query_result[0] | map(attribute='ip') | list }}"

            - name: Generate filtered iDRAC IP list
              ansible.builtin.set_fact:
                filtered_bmc_ip_list: "{{ hostvars['localhost']['bmc_ips'][node_host] | difference(db_idrac_ip_list) }}"
      rescue:
        - name: Failed to connect mysqldb
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg }}"

    - name: Convert filtered_bmc_ip_list to a dictionary with bmc_ip
      ansible.builtin.set_fact:
        filtered_bmc_ip_dict_list: "{{ filtered_bmc_ip_list | map('community.general.dict_kv', 'bmc_ip') | list }}"

    - name: Validate BMC reachability
      ansible.builtin.include_tasks: validate_bmcips_reachability.yml

    - name: Add iDRAC details in mysqldb
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Add iDRAC host in mysqlDB
          community.mysql.mysql_query:
            login_host: "{{ mysqldb_host }}"
            login_port: "{{ mysqldb_container_port }}"
            login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
            login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
            login_db: "{{ mysqldb_name }}"
            query: INSERT IGNORE INTO {{ mysqldb_name + '.services' }} (ip, serviceType, authType, auth)
                  VALUES (%s, %s, %s ,'{"password":"{{ hostvars['localhost']['bmc_password'] | quote }}","username":"{{ hostvars['localhost']['bmc_username'] | quote }}"}') # noqa: yaml[line-length]
            positional_args:
              - "{{ item }}"
              - "{{ service_type }}"
              - "{{ auth_type }}"
          with_items: "{{ telemetry_idrac }}"
          register: add_idrac_to_db
          until: add_idrac_to_db is not failed
          retries: "{{ db_retries }}"
          delay: "{{ db_delay }}"
          no_log: true
      rescue:
        - name: Failed to connect mysqldb
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg | replace('\n', ' ') }}"
