#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Create namespace using k8s module
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ telemetry_namespace }}"

- name: Configure TLS certificate and secrets for kafka
  block:
    - name: Create telemetry certificate directory
      ansible.builtin.file:
        path: "{{ telemetry_cert_path }}"
        state: directory
        mode: "{{ kafka_secrets.dir_permissions }}"
      delegate_to: localhost
      connection: local

    - name: Create SAN config for Kafka cert
      ansible.builtin.template:
        src: kafka-san.cnf.j2
        dest: "{{ telemetry_cert_path }}/kafka-san.cnf"
        mode: "{{ kafka_secrets.san_permissions }}"
      delegate_to: localhost
      connection: local

    - name: Generate Kafka CA private key
      ansible.builtin.command:
        cmd: "openssl genrsa -out {{ kafka_secrets.ca_key_file }} 4096"
      args:
        creates: "{{ kafka_secrets.ca_key_file }}"
      delegate_to: localhost
      connection: local

    - name: Generate Kafka CA self-signed certificate
      ansible.builtin.command:
        cmd: >
          openssl req -x509 -new -nodes
          -key {{ kafka_secrets.ca_key_file }}
          -out {{ kafka_secrets.cacert_file }}
          -days {{ kafka_secrets.ssl_limit }}
          -subj "/CN=KafkaCA"
      args:
        creates: "{{ kafka_secrets.cacert_file }}"
      delegate_to: localhost
      connection: local

    - name: Generate Kafka private key
      ansible.builtin.command:
        cmd: "openssl genrsa -out {{ kafka_secrets.cert_key }} 4096"
      args:
        creates: "{{ kafka_secrets.cert_key }}"
      delegate_to: localhost
      connection: local

    - name: Generate Kafka CSR
      ansible.builtin.command:
        cmd: >
          openssl req -new -key {{ kafka_secrets.cert_key }}
          -out {{ telemetry_cert_path }}/kafka.csr
          -config {{ telemetry_cert_path }}/kafka-san.cnf
      args:
        creates: "{{ telemetry_cert_path }}/kafka.csr"
      delegate_to: localhost
      connection: local

    - name: Sign Kafka certificate with internal CA
      ansible.builtin.command:
        cmd: >
          openssl x509 -req
          -in {{ telemetry_cert_path }}/kafka.csr
          -CA {{ kafka_secrets.cacert_file }}
          -CAkey {{ kafka_secrets.ca_key_file }}
          -CAcreateserial
          -out {{ kafka_secrets.cert_file }}
          -days {{ kafka_secrets.ssl_limit }}
          -sha256
          -extensions v3_req
          -extfile {{ telemetry_cert_path }}/kafka-san.cnf
      args:
        creates: "{{ kafka_secrets.cert_file }}"
      changed_when: false
      delegate_to: localhost
      connection: local
      no_log: true

    - name: Combine Kafka key and certificate into a single PEM file
      ansible.builtin.shell: |
        cat {{ kafka_secrets.cert_key }} {{ kafka_secrets.cert_file }} > {{ kafka_secrets.combined_pem }}
      changed_when: false
      no_log: true
      delegate_to: localhost
      connection: local

    - name: Create Kafka TLS secret in Kubernetes
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ kafka_secrets.name }}"
            namespace: "{{ telemetry_namespace }}"
          type: Opaque
          data:
            kafka.keystore.pem: "{{ lookup('file', kafka_secrets.cert_file) | b64encode }}"
            kafka.keystore.key: "{{ lookup('file', kafka_secrets.cert_key) | b64encode }}"
            kafka.truststore.pem: "{{ lookup('file', kafka_secrets.cacert_file) | b64encode }}"
            kafka.keystore.combined.pem: "{{ lookup('file', kafka_secrets.combined_pem) | b64encode }}"
      no_log: true

- name: Configure secrets for idrac telemetry variables
  block:
    - name: Encode mysqldb username
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_user'] }}" | base64
      register: mysqldb_user_encoded
      changed_when: false
      no_log: true

    - name: Encode mysqldb password
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_password'] }}" | base64
      register: mysqldb_password_encoded
      changed_when: false
      no_log: true

    - name: Encode mysqldb password for root user
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_root_password'] }}" | base64
      register: mysqldb_root_password_encoded
      changed_when: false
      no_log: true

    - name: Configure Kubernetes Secret for MySQL
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ mysqldb_secrets_name }}"
            namespace: "{{ telemetry_namespace }}"
          type: Opaque
          data:
            mysqldb_user: "{{ mysqldb_user_encoded.stdout }}"
            mysqldb_password: "{{ mysqldb_password_encoded.stdout }}"
            mysqldb_root_password: "{{ mysqldb_root_password_encoded.stdout }}"
      no_log: true
