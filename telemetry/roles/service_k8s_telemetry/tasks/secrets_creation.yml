#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Create namespace using k8s module
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ telemetry_namespace }}"

- name: Configure TLS certificate and secrets for kafka
  when: hostvars['localhost']['idrac_telemetry_collection_type'] == "kafka"
  block:
    - name: Create directory for TLS certificates
      ansible.builtin.file:
        path: "{{ cert_path }}"
        state: directory
        mode: "{{ kafka_secrets.dir_permissions }}"
      delegate_to: localhost
      connection: local

    - name: Write SAN config for Kafka cert
      ansible.builtin.copy:
        dest: "/tmp/kafka-san.cnf"
        mode: "0644"
        content: |
          [ req ]
          prompt = no
          default_bits = 4096
          default_md = sha256
          distinguished_name = dn
          x509_extensions = v3_req

          [ dn ]
          CN = omnia-kafka

          [ v3_req ]
          keyUsage = digitalSignature, keyEncipherment
          extendedKeyUsage = serverAuth
          subjectAltName = @alt_names

          [ alt_names ]
          DNS.1 = kafka-controller-0.kafka-controller-headless.telemetry.svc.cluster.local
          DNS.2 = kafka-controller-1.kafka-controller-headless.telemetry.svc.cluster.local
          DNS.3 = kafka-controller-2.kafka-controller-headless.telemetry.svc.cluster.local
          DNS.4 = kafka-controller-0.kafka-controller-headless.telemetry.svc
          DNS.5 = kafka-controller-1.kafka-controller-headless.telemetry.svc
          DNS.6 = kafka-controller-2.kafka-controller-headless.telemetry.svc
          DNS.7 = *.telemetry.svc.cluster.local
          DNS.8 = *.telemetry.svc
      delegate_to: localhost
      connection: local

    - name: Generate TLS cert with SANs (self-signed, via config)
      ansible.builtin.command:
        argv:
          - openssl
          - req
          - -new
          - -newkey
          - rsa:4096
          - -nodes
          - -x509
          - -days
          - "{{ kafka_secrets.ssl_limit }}"
          - -subj
          - "/C=/ST=/L=/O=/CN=omnia-kafka"
          - -keyout
          - "{{ kafka_secrets.cert_key }}"
          - -out
          - "{{ kafka_secrets.cert_file }}"
          - -config
          - /tmp/kafka-san.cnf
          - -extensions
          - v3_req
      args:
        creates: "{{ kafka_secrets.cert_file }}"
      changed_when: false
      delegate_to: localhost
      connection: local

    - name: Configure Kubernetes Secret for Kafka
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ kafka_secrets.name }}"
            namespace: "{{ telemetry_namespace }}"
          type: Opaque
          data:
            tls.crt: "{{ lookup('file', kafka_secrets.cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', kafka_secrets.cert_key) | b64encode }}"
            ca.crt: "{{ lookup('file', kafka_secrets.cert_file) | b64encode }}"
      # no_log: true

- name: Configure secrets for idrac telemetry variables
  block:
    - name: Encode mysqldb username
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_user'] }}" | base64
      register: mysqldb_user_encoded
      changed_when: false
      no_log: true

    - name: Encode mysqldb password
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_password'] }}" | base64
      register: mysqldb_password_encoded
      changed_when: false
      no_log: true

    - name: Encode mysqldb password for root user
      ansible.builtin.shell: |
        set -o pipefail
        echo -n "{{ hostvars['localhost']['mysqldb_root_password'] }}" | base64
      register: mysqldb_root_password_encoded
      changed_when: false
      no_log: true

    - name: Configure Kubernetes Secret for MySQL
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ mysqldb_secrets_name }}"
            namespace: "{{ telemetry_namespace }}"
          type: Opaque
          data:
            mysqldb_user: "{{ mysqldb_user_encoded.stdout }}"
            mysqldb_password: "{{ mysqldb_password_encoded.stdout }}"
            mysqldb_root_password: "{{ mysqldb_root_password_encoded.stdout }}"
