#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Pre-checks for service cluster k8s
  block:
    - name: Run pulp status command on omnia_core container
      ansible.builtin.command: /usr/local/bin/pulp status
      delegate_to: localhost
      changed_when: false
      register: pulp_status_output

    - name: Set pulp content origin value
      ansible.builtin.set_fact:
        pulp_content_origin: "{{ (pulp_status_output.stdout | from_json).content_settings.content_origin }}"

    - name: Set fact for pulp protocol
      ansible.builtin.set_fact:
        pulp_server_ip: "{{ pulp_content_origin | urlsplit('hostname') }}"

    - name: Set fact for pulp protocol
      ansible.builtin.set_fact:
        pulp_server_ip: "{{ pulp_content_origin | urlsplit('hostname') }}"
      delegate_to: localhost
      delegate_facts: true

    - name: Install prereq rpm packages on service kube control plane
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ hostvars['localhost']['rpm_package_names'] }}"

    - name: Set ansible_python_interpreter
      ansible.builtin.set_fact:
        ansible_python_interpreter: "{{ hostvars['localhost']['python_version'] }}"

    - name: Ensure pip3 is available using ensurepip
      ansible.builtin.command: "{{ hostvars['localhost']['python_version'] }} -m ensurepip"
      changed_when: false

    - name: Install pip packages from offline repo
      ansible.builtin.pip:
        name: "{{ item }}"
        extra_args: >
          --find-links={{ hostvars['localhost']['offline_pip_module_path'] }}/{{ item }}/
          --trusted-host={{ hostvars['localhost']['pulp_server_ip'] }}
          --no-index
      loop: "{{ hostvars['localhost']['k8s_pip_packages'] }}"

    - name: Git checkout for iDRAC Telemetry Reference Tools
      block:
        - name: Checkout iDRAC Telemetry GitHub repo
          ansible.builtin.git:
            repo: "{{ idrac_telemetry_github_repo }}"
            dest: "{{ idrac_telemetry_reference_git_clone_path }}"
            version: "{{ reference_tools_stable_commit }}"
            update: false
          register: clone_idrac_telemetry
          until: clone_idrac_telemetry is succeeded
          retries: "{{ max_retries }}"
          delay: "{{ delay_count }}"

      rescue:
        - name: Fail if iDRAC telemetry Git clone fails
          ansible.builtin.fail:
            msg: "{{ idrac_git_clone_error_msg.splitlines() | join(' ') }}"
          when: clone_idrac_telemetry is failed

    - name: Git clone for iDRAC Telemetry script
      block:
        - name: Checkout iDRAC Telemetry GitHub repo
          ansible.builtin.git:
            repo: "{{ idrac_telemetry_scripting_repo }}"
            dest: "{{ idrac_telemetry_scripting_git_clone_path }}"
            version: "{{ idrac_telemetry_scripting_stable_commit }}"
            update: false
          register: clone_idrac_script
          until: clone_idrac_script is succeeded
          retries: "{{ max_retries }}"
          delay: "{{ delay_count }}"
      rescue:
        - name: Fail if iDRAC telemetry Git clone fails
          ansible.builtin.fail:
            msg: "{{ idrac_script_git_clone_error_msg.splitlines() | join(' ') }}"
          when: clone_idrac_script is failed

    - name: Check if k8s is running
      block:
        - name: Check if Kubernetes is running
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Node
          register: kube_node_info
          failed_when: kube_node_info.resources is not defined or kube_node_info.resources | length == 0
      rescue:
        - name: Kubernetes is not running
          ansible.builtin.fail:
            msg: "{{ k8s_not_installed_fail_msg }}"

    - name: Get all StorageClasses
      kubernetes.core.k8s_info:
        api_version: storage.k8s.io/v1
        kind: StorageClass
      register: sc_info

- name: Find default StorageClass
  ansible.builtin.set_fact:
    storage_class_name: "{{ item.metadata.name }}"
  loop: "{{ sc_info.resources }}"
  when: "'storageclass.kubernetes.io/is-default-class' in item.metadata.annotations and
         (item.metadata.annotations['storageclass.kubernetes.io/is-default-class'] | bool)"

- name: Fail if no default StorageClass found
  ansible.builtin.fail:
    msg: "{{ storage_class_missing_fail_msg }}"
  when: storage_class_name is not defined
