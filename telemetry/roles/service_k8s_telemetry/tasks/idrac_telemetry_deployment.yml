#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Create directory for iDRAC telemetry
  ansible.builtin.file:
    path: "{{ service_cluster_idrac_telemetry_dir_path }}"
    state: directory
    mode: "{{ dir_permissions_755 }}"
  delegate_to: oim
  connection: ssh

- name: Git checkout for iDRAC Telemetry Reference Tools
  block:
    - name: Checkout iDRAC Telemetry GitHub repo
      ansible.builtin.git:
        repo: "{{ idrac_telemetry_github_repo }}"
        dest: "{{ idrac_telemetry_reference_git_clone_path }}"
        version: "{{ reference_tools_stable_commit }}"
        update: false
      delegate_to: oim
      connection: ssh
      register: clone_idrac_telemetry
      until: clone_idrac_telemetry is succeeded
      retries: "{{ max_retries }}"
      delay: "{{ delay_count }}"

  rescue:
    - name: Fail if iDRAC telemetry Git clone fails
      ansible.builtin.fail:
        msg: "{{ idrac_git_clone_error_msg.splitlines() | join(' ') }}"
      when: clone_idrac_telemetry is failed

- name: Git clone for iDRAC Telemetry script
  block:
    - name: Checkout iDRAC Telemetry GitHub repo
      ansible.builtin.git:
        repo: "{{ idrac_telemetry_scripting_repo }}"
        dest: "{{ idrac_telemetry_scripting_git_clone_path }}"
        version: "{{ idrac_telemetry_scripting_stable_commit }}"
        update: false
      delegate_to: oim
      connection: ssh
      register: clone_idrac_script
      until: clone_idrac_script is succeeded
      retries: "{{ max_retries }}"
      delay: "{{ delay_count }}"
  rescue:
    - name: Fail if iDRAC telemetry Git clone fails
      ansible.builtin.fail:
        msg: "{{ idrac_script_git_clone_error_msg.splitlines() | join(' ') }}"
      when: clone_idrac_script is failed

- name: Deployment definition for idrac-telemetry StatefulSet
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: "{{ idrac_telemetry_k8s_name }}"
        namespace: "{{ telemetry_namespace }}"
      spec:
        serviceName: "{{ idrac_telemetry_service_name }}"
        replicas: 1 
        selector:
          matchLabels:
            app: "{{ idrac_telemetry_k8s_name }}"
        template:
          metadata:
            labels:
              app: "{{ idrac_telemetry_k8s_name }}"
          spec:
            volumes:
              - name: telemetry-reference-tools
                hostPath:
                  path: "{{ idrac_telemetry_reference_git_clone_path }}"
                  type: Directory

            hostAliases:
              - ip: "127.0.0.1"
                hostnames:
                  - "activemq"
              - ip: "127.0.0.1"
                hostnames:
                  - "mysqldb"

            containers:
              - name: mysqldb
                image: "{{ mysql_image }}"
                imagePullPolicy: IfNotPresent
                volumeMounts:
                  - name: mysqldb-pvc
                    mountPath: /var/lib/mysql/
                env:
                  - name: MYSQL_DATABASE
                    value: "{{ mysqldb_name }}"
                  - name: MYSQL_USER
                    valueFrom:
                      secretKeyRef:
                        name: "{{ mysqldb_secrets_name }}"
                        key: mysqldb_user
                  - name: MYSQL_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ mysqldb_secrets_name }}"
                        key: mysqldb_password
                  - name: MYSQL_ROOT_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ mysqldb_secrets_name }}"
                        key: mysqldb_root_password
                ports:
                  - containerPort: "{{ mysqldb_container_port1 }}"
                  - containerPort: "{{ mysqldb_container_port2 }}"

              - name: activemq
                image: "{{ activemq_image }}"
                imagePullPolicy: "IfNotPresent"
                ports:
                  - containerPort: "{{ activemq_http_port_1 }}"
                  - containerPort: "{{ activemq_http_port_2 }}"

              - name: idrac-telemetry-receiver
                image: "{{ go_image }}"
                imagePullPolicy: "IfNotPresent"
                volumeMounts:
                  - mountPath: /go/src/github.com/telemetry-reference-tools
                    name: telemetry-reference-tools
                workingDir: /go/src/github.com/telemetry-reference-tools
                env:
                  - name: MESSAGEBUS_HOST
                    value: activemq
                  - name: MESSAGEBUS_PORT
                    value: "{{ messagebus_http_port | string }}"
                  - name: CONFIGUI_HTTP_PORT
                    value: "{{ configui_http_port | string }}"
                  - name: MYSQL_DATABASE
                    value: "{{ mysqldb_name }}"
                  - name: MYSQL_USER
                    valueFrom:
                      secretKeyRef:
                        name: "{{ mysqldb_secrets_name }}"
                        key: mysqldb_user
                  - name: MYSQL_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: "{{ mysqldb_secrets_name }}"
                        key: mysqldb_password
                  - name: MYSQL_HOST
                    value: mysqldb
                  - name: MYSQL_HOST_PORT
                    value: "{{ mysqldb_container_port1 | string }}"
                command:
                  - "/bin/sh"
                  - "-c"
                args: ["./scripts/example/idrac-telemetry-receiver.sh"]

              - name: prometheus-pump
                image: "{{ go_image }}"
                imagePullPolicy: "IfNotPresent"
                volumeMounts:
                  - mountPath: /go/src/github.com/telemetry-reference-tools
                    name: telemetry-reference-tools
                workingDir: /go/src/github.com/telemetry-reference-tools
                env:
                  - name: MESSAGEBUS_HOST
                    value: activemq
                  - name: MESSAGEBUS_PORT
                    value: "{{ messagebus_http_port | string }}"
                  - name: PROMETHEUSDB_SERVER
                    value: prometheus
                command:
                  - "/bin/sh"
                  - "-c"
                args: ["go run cmd/prometheuspump/prometheuspump.go"]

              - name: kafka-pump
                image: "{{ go_image }}"
                imagePullPolicy: "IfNotPresent"
                volumeMounts:
                  - mountPath: /go/src/github.com/telemetry-reference-tools
                    name: telemetry-reference-tools
                workingDir: /go/src/github.com/telemetry-reference-tools
                env:
                  - name: MESSAGEBUS_HOST
                    value: activemq
                  - name: MESSAGEBUS_PORT
                    value: "{{ messagebus_http_port | string }}"
                  - name: KAFKA_BROKER
                    value: "{{ kafka_broker }}"
                  - name: KAFKA_TOPIC
                    value: "{{ kafka_topic }}"
                  - name: KAFKA_SKIP_VERIFY
                    value: "{{ kafka_skip_verify | default('true') | lower }}"
                  # - name: KAFKA_CACERT
                  #   value: certs/ca.crt
                  # - name: KAFKA_CLIENT_CERT
                  #   value: certs/client.crt
                  # - name: KAFKA_CLIENT_KEY
                  #   value: certs/client.key
                  # - name: KAFKA_SKIP_VERIFY
                    # value: "{{ kafka_skip_verify | default('false') | lower }}"
                # readinessProbe:
                # tcpSocket:
                #   port: 8082
                # initialDelaySeconds: 15
                # periodSeconds: 10
                # livenessProbe:
                #   tcpSocket:
                #     port: 8082
                #   initialDelaySeconds: 30
                #   periodSeconds: 20
                command: ["/bin/sh", "-c"]
                args: ["go run cmd/kafkapump/kafkapump.go"]
                command: ["/bin/sh", "-c"]
                args: ["go run cmd/kafkapump/kafkapump.go"]

        volumeClaimTemplates:
          - metadata:
              name: mysqldb-pvc
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: "{{ mysqldb_storage }}"

- name: Service for idrac telemetry
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ idrac_telemetry_service_name }}"
        namespace: "{{ telemetry_namespace }}"
        labels:
          app: "{{ idrac_telemetry_service_name }}"
      spec:
        clusterIP: None
        ports:
          - name: mysql-port-1
            port: "{{ mysqldb_container_port1 }}"
          - name: mysql-port-2
            port: "{{ mysqldb_container_port2 }}"
          - name: pump-port-prometheus
            port: "{{ prometheus_pump_port }}"
          - name: pump-port-kafka
            port: 8082
        selector:
          app: "{{ idrac_telemetry_k8s_name }}"

