#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ telemetry_namespace }}
spec:
  serviceName: {{ kafka.headless_service_name }}
  replicas: {{ cp_node_count | int }}
  selector:
    matchLabels:
      app: {{ kafka.app_name }}
  template:
    metadata:
      labels:
        app: {{ kafka.app_name }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ kafka.app_name }}
                topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 3
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 5
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 5
      containers:
      - name: {{ kafka.container_name }}
        image: {{ kafka.image }}
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 9092
            name: internal
          - containerPort: 9093
            name: controller
        lifecycle:
          postStart:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  echo "Creating client-ssl.properties..."
                  cat <<EOF > /opt/kafka/config/client-ssl.properties
                  security.protocol=SSL
                  ssl.truststore.type=PEM
                  ssl.truststore.location=/opt/kafka/tls/kafka.truststore.pem
                  ssl.keystore.type=PEM
                  ssl.keystore.location=/opt/kafka/tls/kafka.keystore.combined.pem
                  ssl.key.location=/opt/kafka/tls/kafka.key.pem
                  EOF
        command: ["/bin/bash", "-c"]
        args:
          - |
            set -e
            echo "Starting Kafka in KRaft mode"

            NODE_ID=$(echo ${POD_NAME} | grep -o '[0-9]*$')
            echo "Using node.id=${NODE_ID}"

            mkdir -p /opt/kafka/config-runtime
            cp /opt/kafka/base-config/server.properties /opt/kafka/config-runtime/server.properties

            # Replace placeholders
            sed -i "s/__NODE_ID__/${NODE_ID}/" /opt/kafka/config-runtime/server.properties
            sed -i "s/__POD_NAME__/${POD_NAME}/" /opt/kafka/config-runtime/server.properties

            echo "Formatting storage if needed..."
            if [ ! -f "/opt/kafka/data/meta.properties" ]; then
              /opt/kafka/bin/kafka-storage.sh format --ignore-formatted --cluster-id=${KAFKA_KRAFT_CLUSTER_ID} --config /opt/kafka/config-runtime/server.properties
            fi

            echo "Starting Kafka..."
            exec /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config-runtime/server.properties
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_KRAFT_CLUSTER_ID
          valueFrom:
            secretKeyRef:
              name: kafka-cluster-id
              key: cluster-id
        volumeMounts:
          - name: kafka-data
            mountPath: /opt/kafka/data
          - name: kafka-config
            mountPath: /opt/kafka/base-config
          - name: kafka-tls
            mountPath: /opt/kafka/tls
            readOnly: true
      volumes:
        - name: kafka-config
          configMap:
            name: kafka-config
        - name: kafka-tls
          secret:
            secretName: {{ kafka_secrets.name }}
            defaultMode: 420
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "{{ hostvars['localhost']['kafka_configurations']['persistence_size'] }}"
        storageClassName: {{ storage_class_name }}
